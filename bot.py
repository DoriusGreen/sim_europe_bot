# bot.py
import os
import logging
from typing import List, Dict, Optional
from dataclasses import dataclass
import json
import re

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ö–ª—é—á—ñ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", "8443"))

openai.api_key = OPENAI_API_KEY

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –ø–∞–º'—è—Ç—ñ/–º—ñ—Ç–æ–∫ ====
MAX_TURNS = 14
THANK_YOU_TAG = "<SEND_THANK_YOU>"

# ==== –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ====
ORDER_INFO_REQUEST = (
    "üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å:\n\n"
    "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
    "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
    "3. –ú—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è \"–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\".\n"
    "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç."
)

# ==== –ü—Ä–∞–π—Å–∏ –π –º–∞–ø–∏ –∫—Ä–∞—ó–Ω ====
# –°—Ö–æ–¥–∏–Ω–∫–∏: (–º—ñ–Ω.–∫-—Ç—å, —Ü—ñ–Ω–∞ –∑–∞ 1). None = –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞
PRICE_TIERS = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": [(1000, None), (100, 210), (20, 250), (10, 275), (4, 300), (2, 325), (1, 350)],
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò":     [(20, 700), (4, 750), (1, 800)],
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê":      [(10, 900), (4, 1000), (1, 1100)],
    "–§–†–ê–ù–¶–Ü–Ø":        [(10, 1100), (4, 1200), (1, 1400)],
    "–Ü–°–ü–ê–ù–Ü–Ø":        [(10, 800), (4, 850), (1, 900)],
    "–ß–ï–•–Ü–Ø":          [(10, 650), (4, 700), (1, 750)],
    "–ü–û–õ–¨–©–ê":         [(10, 400), (4, 450), (1, 500)],
    "–õ–ò–¢–í–ê":          [(10, 650), (4, 700), (1, 750)],
    "–õ–ê–¢–í–Ü–Ø":         [(10, 650), (4, 700), (1, 750)],
    "–ö–ê–ó–ê–•–°–¢–ê–ù":      [(10, 900), (4, 1000), (2, 1100), (1, 1200)],
    "–ú–ê–†–û–ö–ö–û":        [(10, 750), (4, 800), (2, 900), (1, 1000)],
    "–°–®–ê":            [(10, 1000), (4, 1300), (1, 1400)],
}

FLAGS = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": "üá¨üáß",
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": "üá≥üá±",
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê": "üá©üá™",
    "–§–†–ê–ù–¶–Ü–Ø": "üá´üá∑",
    "–Ü–°–ü–ê–ù–Ü–Ø": "üá™üá∏",
    "–ß–ï–•–Ü–Ø": "üá®üáø",
    "–ü–û–õ–¨–©–ê": "üáµüá±",
    "–õ–ò–¢–í–ê": "üá±üáπ",
    "–õ–ê–¢–í–Ü–Ø": "üá±üáª",
    "–ö–ê–ó–ê–•–°–¢–ê–ù": "üá∞üáø",
    "–ú–ê–†–û–ö–ö–û": "üá≤üá¶",
    "–°–®–ê": "üá∫üá∏",
}

DISPLAY = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": "–ê–Ω–≥–ª—ñ—è",
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏",
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê": "–ù—ñ–º–µ—á—á–∏–Ω–∞",
    "–§–†–ê–ù–¶–Ü–Ø": "–§—Ä–∞–Ω—Ü—ñ—è",
    "–Ü–°–ü–ê–ù–Ü–Ø": "–Ü—Å–ø–∞–Ω—ñ—è",
    "–ß–ï–•–Ü–Ø": "–ß–µ—Ö—ñ—è",
    "–ü–û–õ–¨–©–ê": "–ü–æ–ª—å—â–∞",
    "–õ–ò–¢–í–ê": "–õ–∏—Ç–≤–∞",
    "–õ–ê–¢–í–Ü–Ø": "–õ–∞—Ç–≤—ñ—è",
    "–ö–ê–ó–ê–•–°–¢–ê–ù": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
    "–ú–ê–†–û–ö–ö–û": "–ú–∞—Ä–æ–∫–∫–æ",
    "–°–®–ê": "–°–®–ê",
}

# ==== –ï–≤—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞–º—ñ—Ä—É/–¥–∞–Ω–∏—Ö ====
ORDER_INTENT_KEYWORDS = [
    # UA
    "–∑–∞–º–æ–≤–∏—Ç–∏", "–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", "–æ—Ñ–æ—Ä–º–∏—Ç–∏", "–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è",
    "–ø–æ—Ç—Ä—ñ–±–Ω–∞", "–ø–æ—Ç—Ä—ñ–±–Ω—ñ", "–ø–æ—Ç—Ä—ñ–±–Ω–æ", "–≤—ñ–∑—å–º—É", "–∫—É–ø–∏—Ç–∏",
    # RU
    "–∑–∞–∫–∞–∑–∞—Ç—å", "–∑–∞–∫–∞–∑", "—Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", "–æ—Ñ–æ—Ä–º–∏—Ç—å", "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ",
    "–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "–∫—É–ø–∏—Ç—å", "–Ω—É–∂–Ω–æ", "–Ω—É–∂–Ω–∞", "–Ω—É–∂–Ω—ã", "–≤–æ–∑—å–º—É", "–º–æ–≥—É –∑–∞–∫–∞–∑–∞—Ç—å"
]

COUNTRY_KEYWORDS = [
    "–∞–Ω–≥–ª—ñ—è","–≤–µ–ª–∏–∫–∞ –±—Ä–∏—Ç–∞–Ω—ñ—è","–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è","uk","–Ω—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏","–Ω—ñ–º–µ—á—á–∏–Ω–∞","—Ñ—Ä–∞–Ω—Ü—ñ—è",
    "—ñ—Å–ø–∞–Ω—ñ—è","—á–µ—Ö—ñ—è","–ø–æ–ª—å—â–∞","–ª–∏—Ç–≤–∞","–ª–∞—Ç–≤—ñ—è","–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω","–º–∞—Ä–æ–∫–∫–æ","—Å—à–∞","usa","–∞–º–µ—Ä–∏–∫–∞"
]

def looks_like_order_intent(text: str) -> bool:
    t = (text or "").lower()
    return any(k in t for k in ORDER_INTENT_KEYWORDS)

def contains_any_required_field(text: str) -> tuple[bool, list]:
    t = (text or "").lower()
    # —Ç–µ–ª–µ—Ñ–æ–Ω
    has_phone = bool(re.search(r'(\+?3?8?0?\D*\d{2}\D*\d{3,4}\D*\d{3,4})', t)) or bool(re.search(r'\b0\d{2}\D*\d{3,4}\D*\d{3,4}\b', t))
    # –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è/–ø–æ—à—Ç–æ–º–∞—Ç
    has_np = ("–ø–æ—à—Ç–æ–º–∞—Ç" in t and re.search(r'\d{3,6}', t)) or ("‚Ññ" in t and re.search(r'\d+', t)) or ("–Ω–æ–≤–æ—ó –ø–æ—à—Ç–∏" in t or "–Ω–æ–≤–∞ –ø–æ—à—Ç–∞" in t)
    # –∫—Ä–∞—ó–Ω–∞ + –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    has_country_word = any(k in t for k in COUNTRY_KEYWORDS)
    has_qty = bool(re.search(r'\d+', t))
    has_country_qty = has_country_word and has_qty

    missing = []
    if not has_phone:
        missing.append("2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.")
    if not has_np:
        missing.append("3. –ú—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è \"–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\".")
    if not has_country_qty:
        missing.append("4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.")
    return (has_phone or has_np or has_country_qty, missing)

def normalize_country(name: str) -> str:
    n = (name or "").strip().upper()
    # –°–∏–Ω–æ–Ω—ñ–º–∏
    if n in ("–ê–ù–ì–õ–Ü–Ø", "UK", "UNITED KINGDOM", "–í–ë", "GREAT BRITAIN"):
        return "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø"
    if n in ("USA", "UNITED STATES", "–®–¢–ê–¢–ò"):
        return "–°–®–ê"
    return n

def unit_price(country_norm: str, qty: int) -> Optional[int]:
    tiers = PRICE_TIERS.get(country_norm)
    if not tiers:
        return None
    for min_q, price in tiers:
        if qty >= min_q:
            return price
    return None

# ==== –®–∞–±–ª–æ–Ω–∏ –ø—ñ–¥—Å—É–º–∫—É ====
ORDER_LINE = "{flag} {disp}, {qty} —à—Ç ‚Äî {line_total} –≥—Ä–Ω  \n"

@dataclass
class OrderItem:
    country: str
    qty: int

@dataclass
class OrderData:
    full_name: str
    phone: str
    city: str
    np: str
    items: List[OrderItem]

def render_order(order: OrderData) -> str:
    lines = []
    grand_total = 0
    counted_countries = 0

    for it in order.items:
        c_norm = normalize_country(it.country)
        disp = DISPLAY.get(c_norm, it.country.strip().title())
        flag = FLAGS.get(c_norm, "")
        price = unit_price(c_norm, it.qty)

        if price is None:
            line_total_str = "–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞"
        else:
            line_total = price * it.qty
            grand_total += line_total
            counted_countries += 1
            line_total_str = str(line_total)

        lines.append(ORDER_LINE.format(
            flag=flag, disp=disp, qty=it.qty, line_total=line_total_str
        ))

    header = (
        f"{order.full_name} \n"
        f"{order.phone}\n"
        f"{order.city} ‚Ññ {order.np}  \n\n"
    )

    body = "".join(lines) + "\n"

    if counted_countries >= 2:
        footer = f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–º–∞: {grand_total} –≥—Ä–Ω\n"
    else:
        footer = ""

    return header + body + footer

# ==== JSON –ø–∞—Ä—Å–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–æ–¥–µ–ª—ñ ====
ORDER_JSON_RE = re.compile(r"\{[\s\S]*\}")

def try_parse_order_json(text: str) -> Optional[OrderData]:
    m = ORDER_JSON_RE.search(text or "")
    if not m:
        return None
    try:
        data = json.loads(m.group(0))
        items = [OrderItem(country=i["country"], qty=int(i["qty"])) for i in data.get("items", [])]
        return OrderData(
            full_name=data.get("full_name", "").strip(),
            phone=data.get("phone", "").strip(),
            city=data.get("city", "").strip(),
            np=str(data.get("np", "")).strip(),
            items=items
        )
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON: {e}")
        return None

# ==== –°–ò–°–¢–ï–ú–ù–ò–ô –ü–†–û–ú–ü–¢ ====
def build_system_prompt() -> str:
    return (
        "–¢–∏ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —ñ –∫–æ—Ä–∏—Å–Ω–∏–π Telegram-–±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω SIM-–∫–∞—Ä—Ç. "
        "–ù–∞ –ø–æ—á–∞—Ç–∫—É —á–∞—Ç—É –∫–ª—ñ—î–Ω—Ç —É–∂–µ –æ—Ç—Ä–∏–º–∞–≤ –ø—Ä–∞–π—Å–∏ –≤—ñ–¥ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ ‚Äî —Ç–∏ —ó—Ö –Ω–µ –¥—É–±–ª—é—î—à, –∞ –ø—ñ–¥—Ö–æ–ø–ª—é—î—à –¥—ñ–∞–ª–æ–≥. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø–æ —Å—É—Ç—ñ, –∑–∞–ø–∞–º º—è—Ç–æ–≤—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, –Ω–µ –ø–µ—Ä–µ–ø–∏—Ç—É–π –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ.\n\n"

        "–ü–û–í–ù–ï –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 4 –ø—É–Ω–∫—Ç—ñ–≤:\n"
        "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "3. –ú—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ¬´–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏¬ª.\n"
        "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.\n\n"

        "–Ø–∫—â–æ –±—Ä–∞–∫—É—î –î–ï–Ø–ö–ò–• –ø—É–Ω–∫—Ç—ñ–≤ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –°–£–í–û–†–û –≤ —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ (–±–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–æ/–ø—ñ—Å–ª—è):\n"
        "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:\n"
        "\n"
        "<–∑–∞–ª–∏—à–∏ –ª–∏—à–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ä—è–¥–∫–∏ –∑ —ó—Ö–Ω—ñ–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏, –Ω–∞–ø—Ä.>\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.\n\n"

        "–ö–æ–ª–∏ –í–°–Ü –¥–∞–Ω—ñ —î ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON –∑–∞ —Å—Ö–µ–º–æ—é (–±–µ–∑ –ø—ñ–¥—Å—É–º–∫—É, –±–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É):\n"
        "{\n"
        '  "full_name": "–Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ",\n'
        '  "phone": "0XX-XXXX-XXX",\n'
        '  "city": "–ú—ñ—Å—Ç–æ",\n'
        '  "np": "–ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç",\n'
        '  "items": [ {"country":"–ö–†–ê–á–ù–ê","qty":N}, ... ]\n'
        "}\n\n"

        "–ü—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ —Ç–∏ –≤—ñ–¥–¥–∞—î—à JSON, –±–µ–∫–µ–Ω–¥ —Å–∞–º –ø–æ—Ä–∞—Ö—É—î —Ü—ñ–Ω–∏/—Å—É–º–∏ —Ç–∞ —Å—Ñ–æ—Ä–º—É—î –ø—ñ–¥—Å—É–º–æ–∫ —É –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ. "
        "¬´–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–º–∞¬ª –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫—Ä–∞—ó–Ω 2 –∞–±–æ –±—ñ–ª—å—à–µ.\n\n"

        "–¶—ñ–Ω–∏ (—à—Ç—É—á–Ω–æ/–æ–ø—Ç–æ–º):\n"
        "üá¨üáß –í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø: 1 ‚Äî 350; 2‚Äì3 ‚Äî 325; 4‚Äì9 ‚Äî 300; 10‚Äì19 ‚Äî 275; 20‚Äì99 ‚Äî 250; 100+ ‚Äî 210; 1000+ ‚Äî –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞\n"
        "üá≥üá± –ù–Ü–î–ï–†–õ–ê–ù–î–ò: 1‚Äì3 ‚Äî 800; 4‚Äì19 ‚Äî 750; 20‚Äì99 ‚Äî 700\n"
        "üá©üá™ –ù–Ü–ú–ï–ß–ß–ò–ù–ê: 1‚Äì3 ‚Äî 1100; 4‚Äì9 ‚Äî 1000; 10‚Äì99 ‚Äî 900\n"
        "üá´üá∑ –§–†–ê–ù–¶–Ü–Ø: 1‚Äì3 ‚Äî 1400; 4‚Äì9 ‚Äî 1200; 10‚Äì99 ‚Äî 1100\n"
        "üá™üá∏ –Ü–°–ü–ê–ù–Ü–Ø: 1‚Äì3 ‚Äî 900; 4‚Äì9 ‚Äî 850; 10‚Äì99 ‚Äî 800\n"
        "üá®üáø –ß–ï–•–Ü–Ø: 1‚Äì3 ‚Äî 750; 4‚Äì9 ‚Äî 700; 10‚Äì99 ‚Äî 650\n"
        "üáµüá± –ü–û–õ–¨–©–ê: 1‚Äì3 ‚Äî 500; 4‚Äì9 ‚Äî 450; 10‚Äì99 ‚Äî 400\n"
        "üá±üáπ –õ–ò–¢–í–ê: 1‚Äì3 ‚Äî 750; 4‚Äì9 ‚Äî 700; 10‚Äì99 ‚Äî 650\n"
        "üá±üáª –õ–ê–¢–í–Ü–Ø: 1‚Äì3 ‚Äî 750; 4‚Äì9 ‚Äî 700; 10‚Äì99 ‚Äî 650\n"
        "üá∞üáø –ö–ê–ó–ê–•–°–¢–ê–ù: 1 ‚Äî 1200; 2‚Äì3 ‚Äî 1100; 4‚Äì9 ‚Äî 1000; 10‚Äì99 ‚Äî 900\n"
        "üá≤üá¶ –ú–ê–†–û–ö–ö–û: 1 ‚Äî 1000; 2‚Äì3 ‚Äî 900; 4‚Äì9 ‚Äî 800; 10‚Äì99 ‚Äî 750\n"
        "üá∫üá∏ –°–®–ê (–¥–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è): 1‚Äì3 ‚Äî 1400; 4‚Äì9 ‚Äî 1300; 10‚Äì99 ‚Äî 1000\n\n"

        "FAQ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —Ü–∏–º–∏ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è–º–∏, –∫–æ—Ä–æ—Ç–∫–æ –π –ø–æ —Å—É—Ç—ñ:\n"
        "–Ø–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ SIM-–∫–∞—Ä—Ç—É?\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—Ç–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ –ø–æ—á–µ–∫–∞–π—Ç–µ –ø–æ–∫–∏ —Å—ñ–º-–∫–∞—Ä—Ç–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–æ –º–µ—Ä–µ–∂—ñ (–∞–±–æ –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ –º–µ—Ä–µ–∂—ñ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ).\n\n"
        "–ß–∏ –∑–º–æ–∂—É —è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏?\n"
        "–¢–∞–∫! –í–∏ –æ–¥—Ä–∞–∑—É –∑–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ WhatsApp, Telegram, Viber —Ç–∞ —ñ–Ω—à—ñ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏, –∞ —Ç–∞–∫–æ–∂ –ø—Ä–∏–π–Ω—è—Ç–∏ SMS –∑ –±—É–¥—å-—è–∫–∏—Ö —ñ–Ω—à–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤.\n\n"
        "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏?\n"
        "–ù—ñ. –°—ñ–º-–∫–∞—Ä—Ç–∞ –æ–¥—Ä–∞–∑—É –ø—Ä–∞—Ü—é—î –Ω–∞ –ø—Ä–∏–π–æ–º SMS, –∞–ª–µ –¥–ª—è –≤—Ö—ñ–¥–Ω–∏—Ö —Ç–∞ –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∑–≤—ñ–Ω–∫—ñ–≤ –ø–æ—Ç—Ä–µ–±—É—î –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è. –ú–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è–º–∏, –Ω–∞ –∂–∞–ª—å, –Ω–µ –∑–∞–π–º–∞—î–º–æ—Å—å, –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ —Å–µ—Ä–≤—ñ—Å ding.com —Ç–∞ –ø–ª–∞—Ç—ñ–∂–Ω—É —Å–∏—Å—Ç–µ–º—É PayPal.\n\n"
        "–°–∫—ñ–ª—å–∫–∏ SIM-–∫–∞—Ä—Ç–∞ –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–∞?\n"
        "–ó–∞–∑–≤–∏—á–∞–π –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ –ø—ñ–≤—Ä–æ–∫—É. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∂ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏ –±—É–¥—É—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó —Å—ñ–º–∫–∏. –©–æ–± —Å—ñ–º-–∫–∞—Ä—Ç–∞ –ø—Ä–∞—Ü—é–≤–∞–ª–∞ –±—ñ–ª—å—à–µ –Ω—ñ–∂ –ø—ñ–≤—Ä–æ–∫—É, –ø–æ—Ç—Ä—ñ–±–Ω–æ –∫–æ–∂–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤ –ø–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –Ω–∞ 10 —Ñ—É–Ω—Ç—ñ–≤ —á–∏ —î–≤—Ä–æ.\n\n"
        "–Ø–∫—ñ —Ç–∞—Ä–∏—Ñ–∏?\n"
        "–ü–æ —Ç–∞—Ä–∏—Ñ–∞–º –º–∏ –Ω–∞–∂–∞–ª—å –Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç—É—î–º–æ, –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç—ñ –≤–∞—à–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n\n"

        "–°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —á—ñ—Ç–∫–æ, –±–µ–∑ –≤–æ–¥–∏. –ù–µ –ø–æ–≤—Ç–æ—Ä—é–π —É–∂–µ –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ."
    )

def _ensure_history(ctx: ContextTypes.DEFAULT_TYPE) -> List[Dict[str, str]]:
    if "history" not in ctx.chat_data:
        ctx.chat_data["history"] = []
    return ctx.chat_data["history"]

def _prune_history(history: List[Dict[str, str]]) -> None:
    if len(history) > MAX_TURNS * 2:
        del history[: len(history) - MAX_TURNS * 2]

async def _ask_gpt(history: List[Dict[str, str]], user_message: str) -> str:
    messages = [{"role": "system", "content": build_system_prompt()}]
    messages.extend(history)
    messages.append({"role": "user", "content": user_message})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=600,
            temperature=0.2,
        )
        return response.choices[0].message["content"]
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI: {e}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑."

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –∑ SIM-–∫–∞—Ä—Ç–∞–º–∏: –ø—ñ–¥–∫–∞–∂—É –ø–æ –∫—Ä–∞—ó–Ω–∞—Ö, —Ü—ñ–Ω–∞—Ö —Ç–∞ –æ—Ñ–æ—Ä–º–ª—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. "
        "–ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –¥–ª—è —è–∫–æ—ó –∫—Ä–∞—ó–Ω–∏( –∫—Ä–∞—ó–Ω) —ñ —Å–∫—ñ–ª—å–∫–∏ —à—Ç—É–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî —ñ, —è–∫—â–æ –≥–æ—Ç–æ–≤—ñ, "
        "–æ–¥—Ä–∞–∑—É –≤–∫–∞–∂—ñ—Ç—å –¥–∞–Ω—ñ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–ü–Ü–ë, —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ñ—Å—Ç–æ –π ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è/–ø–æ—à—Ç–æ–º–∞—Ç—É –ù–ü)."
    )
    await update.message.reply_text(text)

# ===== –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip() if update.message and update.message.text else ""
    history = _ensure_history(context)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö —É –ø–æ—Ç–æ—á–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    has_fields, missing_fields = contains_any_required_field(user_message)

    # –Ø–∫—â–æ –Ω–∞–º—ñ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–∏—Ö –ø–æ–ª—ñ–≤ ‚Äî –ø—Ä–æ—Å–∏–º–æ –≤—Å–µ
    if looks_like_order_intent(user_message) and not has_fields:
        history.append({"role": "user", "content": user_message})
        history.append({"role": "assistant", "content": ORDER_INFO_REQUEST})
        _prune_history(history)
        await update.message.reply_text(ORDER_INFO_REQUEST)
        return

    # –Ø–∫—â–æ —î —Ö–æ—á–∞ –± –æ–¥–Ω–µ –ø–æ–ª–µ —ñ —î –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚Äî –ø—Ä–æ—Å–∏–º–æ —Ç—ñ–ª—å–∫–∏ —ó—Ö
    if has_fields and missing_fields:
        response = "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:\n\n" + "\n".join(missing_fields)
        history.append({"role": "user", "content": user_message})
        history.append({"role": "assistant", "content": response})
        _prune_history(history)
        await update.message.reply_text(response)
        return

    # –í–∏–∫–ª–∏–∫ –¥–æ GPT –¥–ª—è —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, FAQ –∞–±–æ —É—Ç–æ—á–Ω–µ–Ω—å)
    reply_text = await _ask_gpt(history, user_message)

    # –Ø–∫—â–æ –º–æ–¥–µ–ª—å –≤—ñ–¥–¥–∞–ª–∞ "–ø—Ä–æ—Å–∏–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø—É–Ω–∫—Ç–∏", –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –µ–º–æ–¥–∑—ñ
    if "–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:" in reply_text and "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:" not in reply_text:
        reply_text = reply_text.replace("–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:", "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:")

    # –Ø–∫—â–æ –ø—Ä–∏–π—à–æ–≤ JSON –ø–æ–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî –ø–∞—Ä—Å–∏–º–æ, —Ä–∞—Ö—É—î–º–æ, —Ä–µ–Ω–¥–µ—Ä–∏–º–æ —à–∞–±–ª–æ–Ω
    parsed = try_parse_order_json(reply_text)
    if parsed and parsed.items and parsed.full_name and parsed.phone and parsed.city and parsed.np:
        summary = render_order(parsed)
        history.append({"role": "user", "content": user_message})
        history.append({"role": "assistant", "content": summary})
        _prune_history(history)

        await update.message.reply_text(summary)
        await update.message.reply_text("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤–æ–Ω–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω. üòä")
        return

    # –Ü–Ω–∞–∫—à–µ ‚Äî –∑–≤–∏—á–∞–π–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–¥–µ–ª—ñ
    history.append({"role": "user", "content": user_message})
    history.append({"role": "assistant", "content": reply_text})
    _prune_history(history)
    await update.message.reply_text(reply_text)

# ===== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏ =====
def main():
    if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ TELEGRAM_BOT_TOKEN, OPENAI_API_KEY –∞–±–æ WEBHOOK_URL")

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="",
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
