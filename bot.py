# bot.py
import os
import logging
from typing import List, Dict, Optional
from dataclasses import dataclass
import json
import re

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ö–ª—é—á—ñ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", "8443"))

openai.api_key = OPENAI_API_KEY

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –ø–∞–º'—è—Ç—ñ/–º—ñ—Ç–æ–∫ ====
MAX_TURNS = 14
THANK_YOU_TAG = "<SEND_THANK_YOU>"

# ==== –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ====
ORDER_INFO_REQUEST = (
    "üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å:\n\n"
    "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
    "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
    "3. –ú—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è \"–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\".\n"
    "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç."
)

# ==== –ü—Ä–∞–π—Å–∏ –π –º–∞–ø–∏ –∫—Ä–∞—ó–Ω ====
# –°—Ö–æ–¥–∏–Ω–∫–∏: (–º—ñ–Ω.–∫-—Ç—å, —Ü—ñ–Ω–∞ –∑–∞ 1). None = –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞
PRICE_TIERS = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": [(1000, None), (100, 210), (20, 250), (10, 275), (4, 300), (2, 325), (1, 350)],
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò":     [(20, 700), (4, 750), (1, 800)],
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê":      [(10, 900), (4, 1000), (1, 1100)],
    "–§–†–ê–ù–¶–Ü–Ø":        [(10, 1100), (4, 1200), (1, 1400)],
    "–Ü–°–ü–ê–ù–Ü–Ø":        [(10, 800), (4, 850), (1, 900)],
    "–ß–ï–•–Ü–Ø":          [(10, 650), (4, 700), (1, 750)],
    "–ü–û–õ–¨–©–ê":         [(10, 400), (4, 450), (1, 500)],
    "–õ–ò–¢–í–ê":          [(10, 650), (4, 700), (1, 750)],
    "–õ–ê–¢–í–Ü–Ø":         [(10, 650), (4, 700), (1, 750)],
    "–ö–ê–ó–ê–•–°–¢–ê–ù":      [(10, 900), (4, 1000), (2, 1100), (1, 1200)],
    "–ú–ê–†–û–ö–ö–û":        [(10, 750), (4, 800), (2, 900), (1, 1000)],
    "–°–®–ê":            [(10, 1000), (4, 1300), (1, 1400)],
}

FLAGS = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": "üá¨üáß",
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": "üá≥üá±",
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê": "üá©üá™",
    "–§–†–ê–ù–¶–Ü–Ø": "üá´üá∑",
    "–Ü–°–ü–ê–ù–Ü–Ø": "üá™üá∏",
    "–ß–ï–•–Ü–Ø": "üá®üáø",
    "–ü–û–õ–¨–©–ê": "üáµüá±",
    "–õ–ò–¢–í–ê": "üá±üáπ",
    "–õ–ê–¢–í–Ü–Ø": "üá±üáª",
    "–ö–ê–ó–ê–•–°–¢–ê–ù": "üá∞üáø",
    "–ú–ê–†–û–ö–ö–û": "üá≤üá¶",
    "–°–®–ê": "üá∫üá∏",
}

DISPLAY = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": "–ê–Ω–≥–ª—ñ—è",
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏",
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê": "–ù—ñ–º–µ—á—á–∏–Ω–∞",
    "–§–†–ê–ù–¶–Ü–Ø": "–§—Ä–∞–Ω—Ü—ñ—è",
    "–Ü–°–ü–ê–ù–Ü–Ø": "–Ü—Å–ø–∞–Ω—ñ—è",
    "–ß–ï–•–Ü–Ø": "–ß–µ—Ö—ñ—è",
    "–ü–û–õ–¨–©–ê": "–ü–æ–ª—å—â–∞",
    "–õ–ò–¢–í–ê": "–õ–∏—Ç–≤–∞",
    "–õ–ê–¢–í–Ü–Ø": "–õ–∞—Ç–≤—ñ—è",
    "–ö–ê–ó–ê–•–°–¢–ê–ù": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
    "–ú–ê–†–û–ö–ö–û": "–ú–∞—Ä–æ–∫–∫–æ",
    "–°–®–ê": "–°–®–ê",
}

def normalize_country(name: str) -> str:
    n = (name or "").strip().upper()
    # –°–∏–Ω–æ–Ω—ñ–º–∏ (—Ä–æ–∑—à–∏—Ä–µ–Ω–æ)
    if n in ("–ê–ù–ì–õ–Ü–Ø", "–ë–†–ò–¢–ê–ù–Ü–Ø", "UK", "U.K.", "UNITED KINGDOM", "–í–ë", "GREAT BRITAIN"):
        return "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø"
    if n in ("USA", "U.S.A.", "UNITED STATES", "UNITED STATES OF AMERICA", "–®–¢–ê–¢–ò", "–ê–ú–ï–†–ò–ö–ê", "US", "U.S."):
        return "–°–®–ê"
    return n

# ---------- –û–ü–ï–†–ê–¢–û–†–ò –î–õ–Ø –ê–ù–ì–õ–Ü–á ----------
def canonical_operator(op: Optional[str]) -> Optional[str]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–∞–Ω–æ–Ω—ñ—á–Ω—ñ –Ω–∞–∑–≤–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –ê–Ω–≥–ª—ñ—ó –∞–±–æ None."""
    if not op:
        return None
    o = op.strip().lower()
    if o in ("o2", "–æ2"):
        return "O2"
    if o in ("lebara", "–ª–µ–±–∞—Ä–∞"):
        return "Lebara"
    if o in ("vodafone", "–≤–æ–¥–∞—Ñ–æ–Ω", "–≤–æ–¥–æ—Ñ–æ–Ω"):
        return "Vodafone"
    return None  # —è–∫—â–æ GPT/–∫–ª—ñ—î–Ω—Ç –ø–µ—Ä–µ–¥–∞–≤ —â–æ—Å—å —ñ–Ω—à–µ ‚Äî –Ω–µ –ø–æ–∫–∞–∑—É—î–º–æ
# -----------------------------------------

def unit_price(country_norm: str, qty: int) -> Optional[int]:
    tiers = PRICE_TIERS.get(country_norm)
    if not tiers:
        return None
    for min_q, price in tiers:
        if qty >= min_q:
            return price
    return None

# ==== –ü—Ä–∞–π—Å-—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ ====

def _format_range(min_q: int, max_q: Optional[int]) -> str:
    if max_q is None:
        return f"{min_q}+ —à—Ç."
    if min_q == max_q:
        return f"{min_q} —à—Ç."
    return f"{min_q}-{max_q} —à—Ç."

def render_price_block(country_key: str) -> str:
    flag = FLAGS.get(country_key, "")
    header = f"{flag} {country_key} {flag}\n\n"
    tiers = PRICE_TIERS.get(country_key, [])
    if not tiers:
        return header + "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n\n"

    tiers_sorted = sorted(tiers, key=lambda x: x[0])
    lines = []
    inserted_gap = False
    for idx, (min_q, price) in enumerate(tiers_sorted):
        next_min = tiers_sorted[idx + 1][0] if idx + 1 < len(tiers_sorted) else None
        max_q = (next_min - 1) if next_min else None

        if not inserted_gap and min_q >= 100 and idx > 0:
            lines.append("")
            inserted_gap = True

        qty_part = _format_range(min_q, max_q)
        if price is None:
            line = f"{qty_part} ‚Äî –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞"
        else:
            line = f"{qty_part} ‚Äî {price} –≥—Ä–Ω"
        lines.append(line)

    return header + "\n".join(lines) + "\n\n"

def render_prices(countries: List[str]) -> str:
    if not countries:
        countries = list(PRICE_TIERS.keys())
    blocks = []
    for c in countries:
        key = normalize_country(c).upper()
        if key in PRICE_TIERS:
            blocks.append(render_price_block(key))
    if not blocks:
        blocks = [render_price_block(k) for k in PRICE_TIERS.keys()]
    return "".join(blocks)

# ==== –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ü–Ü–î–°–£–ú–ö–£ (—ñ–º º—è/–º—ñ—Å—Ç–æ/—Ç–µ–ª/‚Ññ) ====

def _cap_word(w: str) -> str:
    return w[:1].upper() + w[1:].lower() if w else w

def _smart_title(s: str) -> str:
    # –ö–∞–ø—ñ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–ª—ñ–≤ —Ç–∞ —á–∞—Å—Ç–∏–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ—ñ—Å
    s = (s or "").strip()
    parts = re.split(r"\s+", s)
    out = []
    for p in parts:
        sub = "-".join(_cap_word(x) for x in p.split("-"))
        out.append(sub)
    return " ".join(out)

def format_full_name(name: str) -> str:
    # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ: –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ —ñ –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ
    tokens = [t for t in (name or "").strip().split() if t]
    if not tokens:
        return ""
    if len(tokens) >= 2:
        return f"{_smart_title(tokens[0])} {_smart_title(tokens[-1])}"
    return _smart_title(tokens[0])

def format_phone(phone: str) -> str:
    digits = re.sub(r"\D", "", phone or "")
    if len(digits) == 12 and digits.startswith("380"):
        digits = "0" + digits[3:]
    if len(digits) == 10:
        return f"{digits[0:3]} {digits[3:6]} {digits[6:10]}"
    return (phone or "").strip()

def _split_city_extra(city: str):
    s = " ".join((city or "").split())
    m = re.match(r"(.+?)\s*\((.+)\)\s*$", s)
    if m:
        return m.group(1), m.group(2)
    parts = re.split(r"\s*[,;/‚Äî‚Äì-]\s*", s, maxsplit=1)
    if len(parts) == 2:
        return parts[0], parts[1]
    return s, None

def format_city(city: str) -> str:
    base, extra = _split_city_extra(city)
    base_fmt = _smart_title(base)
    if extra:
        extra_fmt = _smart_title(extra)
        return f"{base_fmt} ({extra_fmt})"
    return base_fmt

def format_np(np_str: str) -> str:
    s = (np_str or "").strip()
    m = re.search(r"\d+", s)
    if m:
        return m.group(0)
    s = re.sub(r"[^\d]", "", s)
    return s or (np_str or "").strip()

# ==== –®–∞–±–ª–æ–Ω–∏ –ø—ñ–¥—Å—É–º–∫—É ====
ORDER_LINE = "{flag} {disp}, {qty} —à—Ç ‚Äî {line_total} –≥—Ä–Ω  \n"

@dataclass
class OrderItem:
    country: str
    qty: int
    operator: Optional[str] = None  # –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ (–ª–∏—à–µ –¥–ª—è –ê–Ω–≥–ª—ñ—ó –ø–æ–∫–∞–∑—É—î–º–æ –≤ –ø—ñ–¥—Å—É–º–∫—É)

@dataclass
class OrderData:
    full_name: str
    phone: str
    city: str
    np: str
    items: List[OrderItem]

def render_order(order: OrderData) -> str:
    lines = []
    grand_total = 0
    counted_countries = 0

    for it in order.items:
        c_norm = normalize_country(it.country)
        disp_base = DISPLAY.get(c_norm, it.country.strip().title())
        op = canonical_operator(getattr(it, "operator", None))
        op_suf = f" (–æ–ø–µ—Ä–∞—Ç–æ—Ä {op})" if (op and c_norm == "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø") else ""
        disp = disp_base + op_suf

        flag = FLAGS.get(c_norm, "")
        price = unit_price(c_norm, it.qty)

        if price is None:
            line_total_str = "–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞"
        else:
            line_total = price * it.qty
            grand_total += line_total
            counted_countries += 1
            line_total_str = str(line_total)

        lines.append(ORDER_LINE.format(
            flag=flag, disp=disp, qty=it.qty, line_total=line_total_str
        ))

    full_name_fmt = format_full_name(order.full_name)
    phone_fmt = format_phone(order.phone)
    city_fmt = format_city(order.city)
    np_fmt = format_np(order.np)

    header = (
        f"{full_name_fmt} \n"
        f"{phone_fmt}\n"
        f"{city_fmt} ‚Ññ {np_fmt}  \n\n"
    )

    body = "".join(lines) + "\n"

    if counted_countries >= 2:
        footer = f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–º–∞: {grand_total} –≥—Ä–Ω\n"
    else:
        footer = ""

    return header + body + footer

# ==== JSON –ø–∞—Ä—Å–µ—Ä–∏ ====
ORDER_JSON_RE = re.compile(r"\{[\s\S]*\}")
PRICE_JSON_RE = re.compile(r"\{[\s\S]*\}")

def try_parse_order_json(text: str) -> Optional[OrderData]:
    m = ORDER_JSON_RE.search(text or "")
    if not m:
        return None
    try:
        data = json.loads(m.group(0))
        items = [
            OrderItem(
                country=i["country"],
                qty=int(i["qty"]),
                operator=i.get("operator")
            )
            for i in data.get("items", [])
        ]
        return OrderData(
            full_name=data.get("full_name", "").strip(),
            phone=data.get("phone", "").strip(),
            city=data.get("city", "").strip(),
            np=str(data.get("np", "")).strip(),
            items=items
        )
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON: {e}")
        return None

def try_parse_price_json(text: str) -> Optional[List[str]]:
    m = PRICE_JSON_RE.search(text or "")
    if not m:
        return None
    try:
        data = json.loads(m.group(0))
        if data.get("ask_prices") is True and isinstance(data.get("countries"), list):
            return data["countries"]
        return None
    except Exception:
        return None

# ==== –°–ò–°–¢–ï–ú–ù–Ü –ü–†–û–ú–ü–¢–ò ====

def build_system_prompt() -> str:
    return (
        "–¢–∏ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —ñ –∫–æ—Ä–∏—Å–Ω–∏–π Telegram-–±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω SIM-–∫–∞—Ä—Ç. "
        "–ù–∞ –ø–æ—á–∞—Ç–∫—É —á–∞—Ç—É –∫–ª—ñ—î–Ω—Ç —É–∂–µ –æ—Ç—Ä–∏–º–∞–≤ –ø—Ä–∞–π—Å–∏ –≤—ñ–¥ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ ‚Äî —Ç–∏ —ó—Ö –Ω–µ –¥—É–±–ª—é—î—à, –∞ –ø—ñ–¥—Ö–æ–ø–ª—é—î—à –¥—ñ–∞–ª–æ–≥. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø–æ —Å—É—Ç—ñ, –∑–∞–ø–∞–º º—è—Ç–æ–≤—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (—ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É), –Ω–µ –ø–µ—Ä–µ–ø–∏—Ç—É–π –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ.\n\n"
        "–ü–û–í–ù–ï –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 4 –ø—É–Ω–∫—Ç—ñ–≤:\n"
        "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "3. –ú—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ¬´–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏¬ª.\n"
        "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.\n\n"
        "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —è–≤–Ω–æ —Ö–æ—á–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–±—É–¥—å-—è–∫–æ—é –º–æ–≤–æ—é), –∞–ª–µ —â–µ –ù–ï –≤–∫–∞–∑–∞–Ω–æ –ñ–û–î–ù–û–ì–û –∑ 4 –ø—É–Ω–∫—Ç—ñ–≤ ‚Äî "
        "–≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –°–ê–ú–ï —Ü–∏–º —Ç–µ–∫—Å—Ç–æ–º (–±—É–∫–≤–∞ –≤ –±—É–∫–≤—É):\n"
        "üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å:\n\n"
        "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "3. –ú—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è \"–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\".\n"
        "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.\n\n"
        "–Ø–∫—â–æ –±—Ä–∞–∫—É—î –î–ï–Ø–ö–ò–• –ø—É–Ω–∫—Ç—ñ–≤ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –°–£–í–û–†–û –≤ —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ:\n"
        "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:\n\n"
        "<–∑–∞–ª–∏—à–∏ –ª–∏—à–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ä—è–¥–∫–∏ –∑ —ó—Ö–Ω—ñ–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏, –Ω–∞–ø—Ä.>\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.\n\n"
        "–ö–æ–ª–∏ –í–°–Ü –¥–∞–Ω—ñ —î ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON –∑–∞ —Å—Ö–µ–º–æ—é:\n"
        "{\n"
        '  "full_name": "–Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ",\n'
        '  "phone": "0XX-XXXX-XXX",\n'
        '  "city": "–ú—ñ—Å—Ç–æ",\n'
        '  "np": "–ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç",\n'
        '  "items": [ {"country":"–ö–†–ê–á–ù–ê","qty":N,"operator":"O2|Lebara|Vodafone"}, ... ]\n'
        "}\n\n"
        "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î –ü–†–û –¶–Ü–ù–ò –∞–±–æ –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫—Ä–∞—ó–Ω ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON:\n"
        "{\n"
        '  "ask_prices": true,\n'
        '  "countries": ["ALL" –∞–±–æ –ø–µ—Ä–µ–ª—ñ–∫ –∫–ª—é—á—ñ–≤, –Ω–∞–ø—Ä. "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø","–°–®–ê"]\n'
        "}\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Ä¢ –í–∏–∑–Ω–∞—á–∞–π –∫—Ä–∞—ó–Ω–∏ —Å–µ–º–∞–Ω—Ç–∏—á–Ω–æ (–±–µ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤).\n"
        "‚Ä¢ –ö–ª—é—á—ñ –∫—Ä–∞—ó–Ω: –í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø, –ù–Ü–î–ï–†–õ–ê–ù–î–ò, –ù–Ü–ú–ï–ß–ß–ò–ù–ê, –§–†–ê–ù–¶–Ü–Ø, –Ü–°–ü–ê–ù–Ü–Ø, –ß–ï–•–Ü–Ø, –ü–û–õ–¨–©–ê, –õ–ò–¢–í–ê, –õ–ê–¢–í–Ü–Ø, –ö–ê–ó–ê–•–°–¢–ê–ù, –ú–ê–†–û–ö–ö–û, –°–®–ê.\n"
        "‚Ä¢ –Ø–∫—â–æ –∑–∞–ø–∏—Ç –∑–∞–≥–∞–ª—å–Ω–∏–π ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ countries: [\"ALL\"].\n"
        "‚Ä¢ –ù–µ –Ω–∞–≤–æ–¥—å —Å–∞–º—ñ —Ü—ñ–Ω–∏ ‚Äî –ª–∏—à–µ JSON.\n\n"
        "–°–µ–º–∞–Ω—Ç–∏–∫–∞:\n"
        "‚Ä¢ UK/United Kingdom/–ë—Ä–∏—Ç–∞–Ω—ñ—è/–õ–æ–Ω–¥–æ–Ω ‚Üí –í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø; USA/–ê–º–µ—Ä–∏–∫–∞/–®—Ç–∞—Ç–∏ ‚Üí –°–®–ê.\n"
        "‚Ä¢ –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –ê–Ω–≥–ª—ñ—ó –Ω–∞–∑–∏–≤–∞—î –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (O2, Lebara, Vodafone) ‚Äî –¥–æ–¥–∞–π –ø–æ–ª–µ \"operator\" –≤ item; —ñ–Ω–∞–∫—à–µ ‚Äî –Ω—ñ.\n"
        "‚Ä¢ –î–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ –∑–∞—Å—Ç–æ—Å–æ–≤—É–π –∫–∞–Ω–æ–Ω—ñ—á–Ω—ñ —Ñ–æ—Ä–º–∏: O2, Lebara, Vodafone.\n"
        "‚Ä¢ –Ø–∫—â–æ –¥–∞–Ω—ñ —Å—É–ø–µ—Ä–µ—á–ª–∏–≤—ñ ‚Äî –ø–æ–ø—Ä–æ—Å–∏ —Å–∞–º–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ/–Ω–µ—è—Å–Ω—ñ –ø—É–Ω–∫—Ç–∏.\n\n"
        "–ü—ñ—Å–ª—è JSON –±–µ–∫–µ–Ω–¥ —Å–∞–º —Ä–∞—Ö—É—î —Å—É–º–∏. ¬´–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–º–∞¬ª –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ª–∏—à–µ —è–∫—â–æ –∫—Ä–∞—ó–Ω 2+.\n"
        "FAQ —ñ —Å—Ç–∏–ª—ñ—Å—Ç–∏–∫–∞ ‚Äî –∫–æ—Ä–æ—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –≤–æ–¥–∏."
    )

def build_followup_prompt() -> str:
    return (
        "–¢–∏ ‚Äî —Ç–æ–π —Å–∞–º–∏–π Telegram-–±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SIM. –ë–ª–æ–∫(–∏) —Ü—ñ–Ω —â–æ–π–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º. "
        "–ó–∞—Ä–∞–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ö–û–†–û–¢–ö–û –Ω–∞ —ñ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—ñ –ù–ï —Å—Ç–æ—Å—É—é—Ç—å—Å—è —Ü—ñ–Ω/–ø—Ä–∞–π—Å—É. "
        "–ù–µ –ø–æ–≤—Ç–æ—Ä—é–π —ñ –Ω–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–æ–≤—É–π —Ü—ñ–Ω–∏, –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–π JSON. –Ø–∫—â–æ –ø–∏—Ç–∞–ª–∏ –ø—Ä–æ —Ç–µ—Ä–º—ñ–Ω–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π: "
        "\"–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω.\" –Ø–∫—â–æ –ø–∏—Ç–∞–ª–∏ –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏, —â–æ —î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ. "
        "–Ø–∫—â–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–∏—Ç–∞–Ω—å –Ω–µ–º–∞ ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫."
    )

def _ensure_history(ctx: ContextTypes.DEFAULT_TYPE) -> List[Dict[str, str]]:
    if "history" not in ctx.chat_data:
        ctx.chat_data["history"] = []
    return ctx.chat_data["history"]

def _prune_history(history: List[Dict[str, str]]) -> None:
    if len(history) > MAX_TURNS * 2:
        del history[: len(history) - MAX_TURNS * 2]

async def _ask_gpt(history: List[Dict[str, str]], user_message: str) -> str:
    messages = [{"role": "system", "content": build_system_prompt()}]
    messages.extend(history)
    messages.append({"role": "user", "content": user_message})
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=600,
            temperature=0.2,
        )
        return response.choices[0].message["content"]
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI: {e}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑."

async def _ask_gpt_followup(history: List[Dict[str, str]], user_message: str) -> str:
    # –æ–∫—Ä–µ–º–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—ñ—Å–ª—è –ø—Ä–∞–π—Å—É
    messages = [{"role": "system", "content": build_followup_prompt()}]
    # –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–∞–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 2-4 —Ä–µ–ø–ª—ñ–∫–∏ –¥—ñ–∞–ª–æ–≥—É
    tail = history[-4:] if len(history) > 4 else history[:]
    messages.extend(tail)
    messages.append({"role": "user", "content": user_message})
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=200,
            temperature=0.2,
        )
        return response.choices[0].message["content"].strip()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ follow-up –¥–æ OpenAI: {e}")
        return ""

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ SIM-–∫–∞—Ä—Ç–∏, –∞ —Ç–∞–∫–æ–∂ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤—Å—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –ë–∞–∂–∞—î—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?"
    )
    await update.message.reply_text(text)

# ===== –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip() if update.message and update.message.text else ""
    history = _ensure_history(context)

    # –í–µ—Å—å —Ä–æ–∑–±—ñ—Ä –Ω–∞–º—ñ—Ä—É/–ø–æ–ª—ñ–≤ –≤—ñ–¥–¥–∞—î–º–æ –Ω–∞ GPT
    reply_text = await _ask_gpt(history, user_message)

    # –£–Ω—ñ—Ñ—ñ–∫—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫, —è–∫—â–æ –º–æ–¥–µ–ª—å –∑–∞–±—É–ª–∞ –µ–º–æ–¥–∑—ñ
    if "–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:" in reply_text and "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:" not in reply_text:
        reply_text = reply_text.replace("–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:", "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:")

    # –Ø–∫—â–æ –ø—Ä–∏–π—à–æ–≤ JSON –ø–æ–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî –ø–∞—Ä—Å–∏–º–æ, —Ä–∞—Ö—É—î–º–æ, —Ä–µ–Ω–¥–µ—Ä–∏–º–æ —à–∞–±–ª–æ–Ω
    parsed = try_parse_order_json(reply_text)
    if parsed and parsed.items and parsed.full_name and parsed.phone and parsed.city and parsed.np:
        summary = render_order(parsed)
        history.append({"role": "user", "content": user_message})
        history.append({"role": "assistant", "content": summary})
        _prune_history(history)

        await update.message.reply_text(summary)
        await update.message.reply_text("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤–æ–Ω–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω. üòä")
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –Ω–∞ —Ü—ñ–Ω–∏
    price_countries = try_parse_price_json(reply_text)
    if price_countries is not None:
        want_all = any(str(c).upper() == "ALL" for c in price_countries)
        if want_all:
            countries = list(PRICE_TIERS.keys())
        else:
            norm = [normalize_country(str(c)).upper() for c in price_countries]
            countries = [c for c in norm if c in PRICE_TIERS]
        price_msg = render_prices(countries)

        # 1) –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø—Ä–∞–π—Å
        history.append({"role": "user", "content": user_message})
        history.append({"role": "assistant", "content": price_msg})
        _prune_history(history)
        await update.message.reply_text(price_msg)

        # 2) –∫–æ—Ä–æ—Ç–∫–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ —ñ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (–±–µ–∑ —Ü—ñ–Ω)
        follow = await _ask_gpt_followup(history, user_message)
        if follow:
            history.append({"role": "assistant", "content": follow})
            _prune_history(history)
            await update.message.reply_text(follow)
        return

    # –Ü–Ω–∞–∫—à–µ ‚Äî –∑–≤–∏—á–∞–π–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–¥–µ–ª—ñ (–≤–∫–ª—é—á–Ω–æ –∑ üõí ORDER_INFO_REQUEST –∞–±–æ üìù —Å–ø–∏—Å–æ–∫ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø–æ–ª—ñ–≤)
    history.append({"role": "user", "content": user_message})
    history.append({"role": "assistant", "content": reply_text})
    _prune_history(history)
    await update.message.reply_text(reply_text)

# ===== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏ =====

def main():
    if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ TELEGRAM_BOT_TOKEN, OPENAI_API_KEY –∞–±–æ WEBHOOK_URL")

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="",
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
