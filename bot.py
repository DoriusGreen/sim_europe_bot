import os
import time
import logging
from typing import List, Dict, Optional, Set, Any, Tuple
from dataclasses import dataclass
import json
import re

from telegram import Update, Message
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ö–æ–Ω—Ñ—ñ–≥ =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "YOUR_TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "YOUR_OPENAI_API_KEY")

# –ì—Ä—É–ø–∞, –∫—É–¥–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é—Ç—å—Å—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
ORDER_GROUP_CHAT_ID = int(os.getenv("ORDER_GROUP_CHAT_ID", "-1001234567890"))

# –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ (–º–æ–∂—É—Ç—å —Ä–µ–ø–ª–∞—è—Ç–∏ ‚Äú–û–ø–ª–∞—á–µ–Ω–æ‚Äù, –≤–∫–∞–∑—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —Ç–æ—â–æ)
MANAGER_USER_IDS: Set[int] = set()
MANAGER_USERNAMES: Set[str] = set()

# ===== OpenAI –∫–ª—é—á =====
openai.api_key = OPENAI_API_KEY

# ===== –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ç–∏–ø–∏ =====
@dataclass
class OrderItem:
    country: str
    qty: int
    operator: Optional[str] = None

@dataclass
class OrderData:
    full_name: str
    phone: str
    city: str
    np: str
    items: List[OrderItem]

# ===== –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è =====
ORDER_INFO_REQUEST = (
    "üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å:\n\n"
    "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
    "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
    "3. –ê–¥—Ä–µ—Å–∞ –¥–ª—è –∫—É—Ä º—î—Ä—Å—å–∫–æ—ó (–∞–±–æ –º—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è \"–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\").\n"
    "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç."
)

# ==== –ü—Ä–∞–π—Å–∏ –π –º–∞–ø–∏ –∫—Ä–∞—ó–Ω (–î–û–°–¢–£–ü–ù–Ü –¢–Ü–õ–¨–ö–ò –¶–Ü) ====
PRICE_TIERS = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–Ü–°–ü–ê–ù–Ü–Ø": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–ü–û–†–¢–£–ì–ê–õ–Ü–Ø": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–Ü–¢–ê–õ–Ü–Ø": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–§–†–ê–ù–¶–Ü–Ø": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–ù–ò–ú–ï–ß–ß–ò–ù–ê": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–ì–ï–†–ú–ê–ù–Ü–Ø": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–ë–ï–õ–¨–ì–Ü–Ø": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–ß–ï–•–Ü–Ø": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–ü–û–õ–¨–©–ê": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–õ–ò–¢–í–ê": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–õ–ê–¢–í–Ü–Ø": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–ö–ê–ó–ê–•–°–¢–ê–ù": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–ú–ê–†–û–ö–ö–û": [(1000, None), (100, 250), (20, 300), (1, 350)],
    "–°–®–ê": [(1000, None), (100, 250), (20, 300), (1, 350)],
}

FLAGS = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": "üá¨üáß",
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": "üá≥üá±",
    "–Ü–°–ü–ê–ù–Ü–Ø": "üá™üá∏",
    "–ü–û–†–¢–£–ì–ê–õ–Ü–Ø": "üáµüáπ",
    "–Ü–¢–ê–õ–Ü–Ø": "üáÆüáπ",
    "–§–†–ê–ù–¶–Ü–Ø": "üá´üá∑",
    "–ù–ò–ú–ï–ß–ß–ò–ù–ê": "üá©üá™",
    "–ì–ï–†–ú–ê–ù–Ü–Ø": "üá©üá™",
    "–ë–ï–õ–¨–ì–Ü–Ø": "üáßüá™",
    "–ß–ï–•–Ü–Ø": "üá®üáø",
    "–ü–û–õ–¨–©–ê": "üáµüá±",
    "–õ–ò–¢–í–ê": "üá±üáπ",
    "–õ–ê–¢–í–Ü–Ø": "üá±üáª",
    "–ö–ê–ó–ê–•–°–¢–ê–ù": "üá∞üáø",
    "–ú–ê–†–û–ö–ö–û": "üá≤üá¶",
    "–°–®–ê": "üá∫üá∏",
}

DISPLAY = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": "–ê–Ω–≥–ª—ñ—è",
    "–ù–ò–ú–ï–ß–ß–ò–ù–ê": "–ù—ñ–º–µ—á—á–∏–Ω–∞",
    "–ì–ï–†–ú–ê–ù–Ü–Ø": "–ù—ñ–º–µ—á—á–∏–Ω–∞",
}

# ==== –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –∫—Ä–∞—ó–Ω ====
def is_country_supported(country: str) -> bool:
    return country in PRICE_TIERS

# ==== –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–≤–æ–¥—É ====
def _smart_title(s: str) -> str:
    s = (s or "").strip()
    if not s:
        return s
    return s[0].upper() + s[1:]

def normalize_country(n: str) -> str:
    n = (n or "").strip().upper()
    if n in ("ENGLAND", "UNITED KINGDOM", "UK", "U.K.", "GREAT BRITAIN", "BRITAIN", "–ê–ù–ì–õ–Ü–Ø", "–ê–ù–ì–õ–ò–Ø", "–ë–†–ò–¢–ê–ù–Ü–Ø", "–ë–†–ò–¢–ê–ù–ò–Ø"):
        return "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø"
    if n in ("USA", "U.S.A.", "UNITED STATES", "UNITED STATES OF AMERICA", "–®–¢–ê–¢–ò", "–ê–ú–ï–†–ò–ö–ê", "US", "U.S."):
        return "–°–®–ê"
    if n in ("ITALY","–ò–¢–ê–õ–ò–Ø","–Ü–¢–ê–õ–Ü–Ø","ITALIA","+39"):
        return "–Ü–¢–ê–õ–Ü–Ø"
    if n in ("–ú–û–õ–î–û–í–ê","MOLDOVA","+373"):
        return "–ú–û–õ–î–û–í–ê"
    return n

# ---------- –û–ü–ï–†–ê–¢–û–†–ò –î–õ–Ø –ê–ù–ì–õ–Ü–á (–¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è) ----------
def canonical_operator(op: Optional[str]) -> Optional[str]:
    if not op:
        return None
    o = op.strip().lower()
    if o in ("o2", "–æ2", "o-2"):
        return "O2"
    if o in ("lebara", "–ª–µ–±–∞—Ä–∞", "–ª–µ–±–∞—Ä–∞–∞"):
        return "Lebara"
    if o in ("vodafone", "–≤–æ–¥–∞—Ñ–æ–Ω", "–≤–æ–¥–∞—Ñ–æ–Ω–Ω"):
        return "Vodafone"
    if o in ("three", "3", "—Ç—Ä–∏"):
        return "Three"
    return None

# ==== –§–æ—Ä–º–∞—Ç–µ—Ä–∏ ====
def format_full_name(name: str) -> str:
    return _smart_title(name)

def format_phone(phone: str) -> str:
    digits = re.sub(r"\D", "", phone or "")
    if digits.startswith("380") and len(digits) == 12:
        digits = "0" + digits[3:]
    if len(digits) == 10:
        return f"{digits[0:3]} {digits[3:6]} {digits[6:10]}"
    return (phone or "").strip()

def format_city(city: str) -> str:
    return _smart_title(city)

def format_np(np_str: str) -> str:
    s = (np_str or "").strip()
    m = re.search(r"\d+", s)
    if m:
        return m.group(0)
    s = re.sub(r"[^\d]", "", s)
    return s or (np_str or "").strip()

# ---------- –ê–¥—Ä–µ—Å–Ω–∞/–∫—É—Ä º—î—Ä—Å—å–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ ----------
ADDRESS_HINT_RE = re.compile(
    r"(–∫—É—Ä'?—î—Ä|–∫—É—Ä—å–µ—Ä|–∞–¥—Ä–µ—Å–Ω|–Ω–∞ –∞–¥—Ä–µ—Å—É|–∞–¥—Ä–µ—Å—É|–≤—É–ª\.|–≤—É–ª–∏—Ü|–ø—Ä–æ—Å–ø|–±—É–ª—å–≤–∞—Ä|–±—É–ª\.|–ø—Ä–æ–≤\.|–±—É–¥\.|–±—É–¥–∏–Ω–æ–∫|–∫–≤\.?|–∫–≤–∞—Ä—Ç–∏—Ä–∞|–ø–ª–æ—â–∞|—Å–µ–ª–æ|—Å–º—Ç|–º—ñ—Å—Ç–æ|–º\.)",
    re.IGNORECASE
)

def is_address_delivery(city: str, np_str: str) -> bool:
    """–ì—Ä—É–±–µ –µ–≤—Ä–∏—Å—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∫–∞–∑–∞–≤ –∞–¥—Ä–µ—Å—É –¥–ª—è –∫—É—Ä º—î—Ä—Å—å–∫–æ—ó –¥–æ—Å—Ç–∞–≤–∫–∏."""
    t = f"{city or ''} {np_str or ''}".lower()
    if ADDRESS_HINT_RE.search(t):
        return True
    # –Ø–∫—â–æ –¥—É–∂–µ —Å—Ö–æ–∂–µ –Ω–∞ –∞–¥—Ä–µ—Å—É (–¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç —ñ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è)
    np_raw = (np_str or "").strip()
    digits_only = re.sub(r"[^\d]", "", np_raw)
    if len(np_raw) >= 10 and not re.fullmatch(r"\d{1,4}", digits_only):
        return True
    return False

def format_delivery_line(city: str, np_str: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ –¥–ª—è 3-–≥–æ –ø—É–Ω–∫—Ç—É: –∞–±–æ üì´: <—Å–∏—Ä–∞ –∞–¥—Ä–µ—Å–∞>, –∞–±–æ '–ú—ñ—Å—Ç–æ ‚Ññ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è'."""
    if is_address_delivery(city, np_str) or not (city or "").strip():
        raw = (np_str or city or "").strip()
        raw = re.sub(r"\s+", " ", raw)
        return f"üì´: {raw}"
    return f"{format_city(city)} ‚Ññ {format_np(np_str)}"

ORDER_LINE = "{flag} {disp}, {qty} —à—Ç ‚Äî {line_total} –≥—Ä–Ω  \n"

@dataclass
class OrderItem:
    country: str
    qty: int
    operator: Optional[str] = None

# ==== –ü—Ä–∞–π—Å-–ª–æ–≥—ñ–∫–∞ ====
def unit_price(country: str, qty: int) -> Optional[int]:
    tiers = PRICE_TIERS.get(country)
    if not tiers:
        return None
    for min_qty, price in tiers:
        if min_qty is None:
            return price
        if qty >= min_qty:
            return price
    return None

# ==== –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å (–∞–Ω—Ç–∏–¥—É–±–ª—å) ====
def _order_signature(order: OrderData) -> str:
    items_sig = ";".join(
        f"{normalize_country(it.country)}:{int(it.qty)}:{canonical_operator(it.operator) or ''}"
        for it in order.items
    )
    return f"{format_full_name(order.full_name)}|{format_phone(order.phone)}|{format_city(order.city)}|{format_np(order.np)}|{items_sig}"

def render_order(order: OrderData) -> str:
    lines = []
    grand_total = 0
    counted_countries = 0

    for it in order.items:
        c_norm = normalize_country(it.country)
        disp_base = DISPLAY.get(c_norm, it.country.strip().title())
        op = canonical_operator(getattr(it, "operator", None))
        op_suf = f" (–æ–ø–µ—Ä–∞—Ç–æ—Ä {op})" if (op and c_norm == "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø") else ""
        disp = disp_base + op_suf

        flag = FLAGS.get(c_norm, "")
        price = unit_price(c_norm, it.qty)

        if price is None:
            line_total_str = "–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞"
        else:
            line_total = price * it.qty
            grand_total += line_total
            counted_countries += 1
            line_total_str = str(line_total)

        lines.append(ORDER_LINE.format(
            flag=flag, disp=disp, qty=it.qty, line_total=line_total_str
        ))

    header = (
        f"{format_full_name(order.full_name)} \n"
        f"{format_phone(order.phone)}\n"
        f"{format_delivery_line(order.city, order.np)}  \n\n"
    )
    body = "".join(lines) + "\n"
    footer = f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {grand_total} –≥—Ä–Ω\n" if counted_countries >= 2 else ""
    return header + body + footer

# ==== JSON –ø–∞—Ä—Å–µ—Ä–∏ ====
ORDER_JSON_RE = re.compile(r"\{[\s\S]*\}")
PRICE_JSON_RE = re.compile(r"\{[\s\S]*\}")
USSD_JSON_RE = re.compile(r"\{[\s\S]*\}")

def try_parse_usa_activation_json(text: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø–æ–≤–µ—Ä–Ω—É–≤ GPT –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ø–æ–∫–∞–∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –°–®–ê."""
    try:
        data = json.loads(text)
        return data.get("ask_usa_activation") is True
    except (json.JSONDecodeError, TypeError):
        return False

def try_parse_price_json(text: str) -> Optional[List[str]]:
    m = PRICE_JSON_RE.search(text or "")
    if not m:
        return None
    try:
        data = json.loads(m.group(0))
        if data.get("ask_prices") is True and isinstance(data.get("countries"), list):
            out = []
            for c in data["countries"]:
                cc = normalize_country(str(c))
                if cc == "ALL":
                    return ["ALL"]
                out.append(cc)
            return out
        return None
    except Exception:
        return None

def try_parse_ussd_json(text: str) -> Optional[List[Tuple[str, Optional[str]]]]:
    m = USSD_JSON_RE.search(text or "")
    if not m:
        return None
    try:
        data = json.loads(m.group(0))
        if data.get("ask_ussd") is True and isinstance(data.get("targets"), list):
            out: List[Tuple[str, Optional[str]]] = []
            for t in data["targets"]:
                country = normalize_country(str(t.get("country", "")))
                op = canonical_operator(t.get("operator"))
                out.append((country, op))
            return out
        return None
    except Exception:
        return None

def try_parse_order_json(text: str) -> Optional[OrderData]:
    m = ORDER_JSON_RE.search(text or "")
    if not m:
        return None
    try:
        data = json.loads(m.group(0))
        if not isinstance(data.get("items"), list) or not data["items"]:
            return None
        items: List[OrderItem] = []
        for it in data["items"]:
            country = normalize_country(str(it.get("country", "")))
            try:
                qty = int(it.get("qty", 0))
            except Exception:
                qty = 0
            if qty <= 0:
                return None
            op = canonical_operator(it.get("operator"))
            items.append(OrderItem(country=country, qty=qty, operator=op))

        return OrderData(
            full_name=str(data.get("full_name", "")).strip(),
            phone=str(data.get("phone", "")).strip(),
            city=str(data.get("city", "")).strip(),
            np=str(data.get("np", "")).strip(),
            items=items
        )
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}")
        return None

# ==== –¶—ñ–Ω–∏ (—Ä–µ–Ω–¥–µ—Ä) ====
def render_prices(countries: List[str]) -> str:
    if countries and countries[0] == "ALL":
        keys = list(PRICE_TIERS.keys())
    else:
        keys = [c for c in countries if c in PRICE_TIERS]
    if not keys:
        return "–ù–∞ –∂–∞–ª—å, —Ü—ñ—î—ó –∫—Ä–∞—ó–Ω–∏ –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ."

    lines: List[str] = []
    for c in keys:
        tiers = PRICE_TIERS[c]
        flag = FLAGS.get(c, "")
        disp = DISPLAY.get(c, c.title())
        prices: List[str] = []
        for min_qty, price in tiers:
            if min_qty is None:
                continue
            prices.append(f"{min_qty}+ ‚Äî {price} –≥—Ä–Ω")
        if any(t[1] is None for t in tiers):
            prices.append("–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞")
        lines.append(f"{flag} {disp}: " + ", ".join(prices))
    return "\n".join(lines)

# ==== USSD (–¥–æ–≤—ñ–¥–∫–∞) ====
USSD_DICT: Dict[str, Dict[Optional[str], str]] = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": {
        None: "*#100#",
        "O2": "*#100#",
        "Lebara": "*#100#",
        "Vodafone": "*#100#",
        "Three": "*#100#",
    },
    "–Ü–°–ü–ê–ù–Ü–Ø": {None: "*#102#"},
    "–ü–û–õ–¨–©–ê": {None: "*100#"},
    "–ß–ï–•–Ü–Ø": {None: "*#62#"},
    "–§–†–ê–ù–¶–Ü–Ø": {None: "*100#"},
    "–°–®–ê": {None: "*#611#"},
}

def render_ussd(targets: List[Tuple[str, Optional[str]]]) -> str:
    lines: List[str] = []
    for country, op in targets:
        m = USSD_DICT.get(country, {})
        code = m.get(op) or m.get(None)
        if not code:
            disp = DISPLAY.get(country, country.title())
            if op:
                lines.append(f"{DISPLAY.get(country, country.title())} ({op}): –Ω–µ–º–∞—î –¥–æ–≤—ñ–¥–∫–∏.")
            else:
                lines.append(f"{disp}: –Ω–µ–º–∞—î –¥–æ–≤—ñ–¥–∫–∏.")
        else:
            if op:
                lines.append(f"{DISPLAY.get(country, country.title())} ({op}): {code}")
            else:
                lines.append(f"{DISPLAY.get(country, country.title())}: {code}")
    return "\n".join(lines)

# ==== –°–®–ê: —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ –¥–µ—Ç–µ–∫—Ç ====
US_ACTIVATION_MSG = (
    "–°–®–ê, –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ —ñ–Ω—à–∏—Ö –∫—Ä–∞—ó–Ω, –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó. –ü—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è SIM –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –Ω–∞ –ø—Ä–∏–π–æ–º SMS.\n\n"
    "–Ø–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–∞ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ —Å—ñ–º-–∫–∞—Ä—Ç—É –°–®–ê?\n\n"
    "https://www.lycamobile.us/en/activate-sim\n"
    "https://www.lycamobile.us/en/faq/\n\n"
    "–ü—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤–∏ –∑–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ SMS –Ω–∞ —Ü—é –∫–∞—Ä—Ç—É."
)

# ==== –ú–µ–Ω–µ–¥–∂–µ—Ä–∏ ====
def is_manager(update: Update) -> bool:
    u = update.effective_user
    if not u:
        return False
    if MANAGER_USER_IDS and u.id in MANAGER_USER_IDS:
        return True
    if MANAGER_USERNAMES and u.username and u.username.lower() in MANAGER_USERNAMES:
        return True
    return False

# ==== –í–∏—Ç—è–≥ ¬´—á–æ–≥–æ –±—Ä–∞–∫—É—î¬ª –∑—ñ —Å–ª—É–∂–±–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ====
def missing_points_from_reply(text: str) -> Set[int]:
    out: Set[int] = set()
    if "–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏" not in (text or ""):
        return out
    for ln in (text or "").splitlines():
        m = re.match(r"\s*([1-4])\.\s", ln)
        if m:
            out.add(int(m.group(1)))
    return out

# ==== –°–®–ê: —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ –¥–µ—Ç–µ–∫—Ç ====
def is_usa_activation_request(text: str) -> bool:
    t = (text or "").lower()
    if "—ñ–Ω—Å—Ç—Ä—É–∫—Ü" in t and "—Å—à–∞" in t:
        return True
    if "–∞–∫—Ç–∏–≤–∞—Ü" in t and "—Å—à–∞" in t:
        return True
    if "activate" in t and "usa" in t:
        return True
    return False

# ==== –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø—Ä–∞–π—Å–∏ ====
def _countries_from_text(text: str) -> List[str]:
    # –î—É–∂–µ –≥—Ä—É–±–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞: —à—É–∫–∞—î–º–æ –≤—ñ–¥–æ–º—ñ –∫–ª—é—á—ñ
    t = (text or "").upper()
    out: List[str] = []
    for k in PRICE_TIERS.keys():
        if k in t:
            out.append(k)
    synonyms = {
        "–ê–ù–ì–õ": "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø",
        "ENGL": "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø",
        "UK": "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø",
        "USA": "–°–®–ê",
        "US": "–°–®–ê",
        "AMERICA": "–°–®–ê",
        "NEM": "–ù–ò–ú–ï–ß–ß–ò–ù–ê",
        "GERMANY": "–ù–ò–ú–ï–ß–ß–ò–ù–ê",
        "DEUTSCH": "–ù–ò–ú–ï–ß–ß–ò–ù–ê",
        "ITAL": "–Ü–¢–ê–õ–Ü–Ø",
        "ESP": "–Ü–°–ü–ê–ù–Ü–Ø",
        "POL": "–ü–û–õ–¨–©–ê",
        "CZE": "–ß–ï–•–Ü–Ø",
        "FR": "–§–†–ê–ù–¶–Ü–Ø",
        "PT": "–ü–û–†–¢–£–ì–ê–õ–Ü–Ø",
        "NL": "–ù–Ü–î–ï–†–õ–ê–ù–î–ò",
    }
    for k, v in synonyms.items():
        if k in t and v not in out:
            out.append(v)
    return out

# ==== –°–∏—Å—Ç–µ–º–Ω—ñ –ø—Ä–æ–º–ø—Ç–∏ ====
def build_system_prompt() -> str:
    return (
         # === –†–û–õ–¨ –¢–ê –ö–û–ù–¢–ï–ö–°–¢ ===
        "–¢–∏ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —ñ –∫–æ—Ä–∏—Å–Ω–∏–π Telegram-–±–æ—Ç –≤ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ñ SIM-–∫–∞—Ä—Ç. –ß—ñ—Ç–∫–æ —Ç–∞ —Å—É–≤–æ—Ä–æ –¥–æ—Ç—Ä–∏–º—É–π—Å—è –ø—Ä–æ–ø–∏—Å–∞–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–∏–∂—á–µ. –ö–æ–ª–∏ —Å—É–º–Ω—ñ–≤–∞—î—à—Å—è ‚Äî –Ω–µ –≤–∏–≥–∞–¥—É–π, –∞ –∫—Ä–∞—â–µ –ø–µ—Ä–µ–ø–∏—Ç–∞–π –∫–ª—ñ—î–Ω—Ç–∞ —â–æ –≤—ñ–Ω –º–∞–≤ –Ω–∞ —É–≤–∞–∑—ñ.\n"
        "–ù–∞ –ø–æ—á–∞—Ç–∫—É —á–∞—Ç—É –∫–ª—ñ—î–Ω—Ç —É–∂–µ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥ –∞–∫–∞—É–Ω—Ç–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–ª—ñ–∫ –∫—Ä–∞—ó–Ω —ñ —Ü—ñ–Ω–∏ –Ω–∞ –Ω–∏—Ö. –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –∑–∞–ø–∏—Ç—É—î ¬´—Ü—ñ–Ω–∏¬ª, ¬´–Ω–∞–±–æ—Ä–∏¬ª, ¬´—Å–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î¬ª ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à —Ü—ñ–Ω–∞–º–∏ –Ω–∞ –∫—Ä–∞—ó–Ω–∏, —è–∫—ñ –≤—ñ–Ω –Ω–∞–∑–≤–∞–≤. –Ø–∫—â–æ –ø–µ—Ä–µ–ª—ñ–∫ –¥–µ—Å—å –¥–∞–ª–µ–∫–æ, —Ç–æ –Ω–∞–¥–∞—î—à –∫–ª—ñ—î–Ω—Ç—É –ø–µ—Ä–µ–ª—ñ–∫ —Ü—ñ–Ω.\n"
        "–Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –ø–∏—Ç–∞—î –ø—Ä–æ —è–∫—É—Å—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫—Ä–∞—ó–Ω—É, —á–∏ –ø–æ —è–∫—ñ–π—Å—å –∫—ñ–ª—å–∫–æ—Å—Ç—ñ, –∞–±–æ –ø—Ä–æ—Å–∏—Ç—å –∑—Ä–æ–±–∏—Ç–∏ –ø—ñ–¥–±—ñ—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, ¬´–º–æ–∂–µ—Ç–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏, —â–æ–± –ø—Ä–∏–π–º–∞–ª–∞ SMS –±–∞–Ω–∫—É –¥–ª—è –ê–Ω–≥–ª—ñ—ó/–ù—ñ–º–µ—á—á–∏–Ω–∏?¬ª), –∞–±–æ –Ω–∞–∑–∏–≤–∞—î –æ–¥—Ä–∞–∑—É –¥–µ–∫—ñ–ª—å–∫–∞ –∫—Ä–∞—ó–Ω, —Ç–æ –ó–ê–í–ñ–î–ò –Ω–∞–¥–∞–≤–∞–π –π–æ–º—É —Ü—ñ–Ω–∏ –Ω–∞ —Ü—ñ –∫—Ä–∞—ó–Ω–∏.\n"
        "–ó–∞–≤–∂–¥–∏ –∞–Ω–∞–ª—ñ–∑—É–π –∫–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –∑–±—ñ—Ä –¥–∞–Ω–∏—Ö: –ø–æ–∫–∞–∑—É–π, —â–æ –±—Ä–∞–∫—É—î, –∞–±–æ —Ñ–æ—Ä–º—É–π JSON, —è–∫—â–æ –≤—Å–µ —î.\n"
        "–ù–µ —á–µ–∫–∞–π —è–≤–Ω–æ–≥–æ '—Ö–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç–∏' ‚Äî –ø–æ—á–∏–Ω–∞–π –∑–±—ñ—Ä –æ–¥—Ä–∞–∑—É –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.\n\n"

        # === –†–û–ë–û–¢–ê –ó REPLY/–¶–ò–¢–ê–¢–ê–ú–ò ===
        "–Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é (reply) –Ω–∞ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ ‚Äî –∑–∞–≤–∂–¥–∏ –≤—Ä–∞—Ö–æ–≤—É–π —ñ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω–∞ —è–∫–µ –∫–ª—ñ—î–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–≤ (—Ü–∏—Ç—É—î), –∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç. –Ø–∫—â–æ —Ç–∞–º —î –¥–∞–Ω—ñ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –π–æ–≥–æ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—ñ–≤ 1‚Äì3, —è–∫—â–æ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ.\n\n"

        # === –°–¢–†–£–ö–¢–£–†–ê –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ===
        "–ü–û–í–ù–ï –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 4 –ø—É–Ω–∫—Ç—ñ–≤:\n"
        "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ (–ù–µ –ø–ª—É—Ç–∞–π —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –ø–æ-–±–∞—Ç—å–∫–æ–≤—ñ! –ó–∞–ø–∏—Å—É–π –ª–∏—à–µ —ñ–º—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.).\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "3. –ê–¥—Ä–µ—Å–∞ –¥–ª—è –∫—É—Ä º—î—Ä—Å—å–∫–æ—ó (–∞–±–æ –º—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ¬´–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏¬ª).\n"
        "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.\n\n"

        # === –Ø–ö –ü–ò–¢–ê–¢–ò –ü–†–û –ù–ï–°–¢–ê–ß–£ –î–ê–ù–ò–• ===
        "–ü—É–Ω–∫—Ç 4 –º–æ–∂–µ –±—É—Ç–∏ —É –¥–æ–≤—ñ–ª—å–Ω—ñ–π —Ñ–æ—Ä–º—ñ/–ø–æ—Ä—è–¥–∫—É (¬´–ê–Ω–≥–ª—ñ—è 2 —à—Ç¬ª, ¬´2 –ê–Ω–≥–ª—ñ—ó¬ª, ¬´2 UK¬ª, ¬´O2 2¬ª —ñ —Ç.–¥.). –¢–∏ –ø–æ–≤–∏–Ω–µ–Ω —Ü–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏. –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –Ω–∞–∑–∏–≤–∞—î —Ç—ñ–ª—å–∫–∏ –∫—Ä–∞—ó–Ω—É/–∫—ñ–ª—å–∫—ñ—Å—Ç—å ‚Äî –Ω–µ —Ä–æ–∑–¥–∞–≤–∞–π –∑–∞–π–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞–π —ó—ó –≤ —á–µ—Ä–Ω–µ—Ç–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –ø—Ä–æ–¥–æ–≤–∂—É–π –∑–±—ñ—Ä.\n"
        "–Ø–∫—â–æ –≤–∏—è–≤–ª–µ–Ω–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø—É–Ω–∫—Ç, –∞–ª–µ —â–µ –ù–ï –≤–∫–∞–∑–∞–Ω–æ –í–°–Ü (–∑ –ø—É–Ω–∫—Ç—ñ–≤ 1‚Äì3), —Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –°–£–í–û–†–û –≤ —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ (–±–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–æ/–ø—ñ—Å–ª—è):\n"
        "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:\n\n"
        "<–∑–∞–ª–∏—à–∏ –ª–∏—à–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ä—è–¥–∫–∏ –∑ —ó—Ö–Ω—ñ–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏, –Ω–∞–ø—Ä.>\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.\n\n"
        "–Ø–∫—â–æ –∂–æ–¥–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ ‚Äî –¥–∞–π ¬´üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è‚Ä¶¬ª –∑ –ø—É–Ω–∫—Ç–∞–º–∏ 1‚Äì4. –ù–µ –ø–∏—à–∏ –Ω—ñ—á–æ–≥–æ –∑–∞–π–≤–æ–≥–æ –¥–æ/–ø—ñ—Å–ª—è. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –ø–∏—Å–∞–≤ —â–æ—Å—å —ñ–∑ 1‚Äì3 ‚Äî –Ω–µ –¥—É–±–ª—é–π ¬´üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è‚Ä¶¬ª, –∞ –ø–æ–∫–∞–∂–∏ –ª–∏—à–µ ¬´üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏¬ª.\n\n"

        # === –Ø–ö –§–û–†–ú–£–í–ê–¢–ò –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ===
        "–Ø–∫—â–æ –≤—Å—ñ —á–æ—Ç–∏—Ä–∏ –ø—É–Ω–∫—Ç–∏ —î ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON –∑–∞ —Å—Ö–µ–º–æ—é (–±–µ–∑ –ø—ñ–¥—Å—É–º–∫—É, –±–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É):\n"
        "{\n"
        '  "full_name": "–Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ",\n'
        '  "phone": "0XX-XXXX-XXX",\n'
        '  "city": "–ú—ñ—Å—Ç–æ",\n'
        '  "np": "–ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è/–ø–æ—à—Ç–æ–º–∞—Ç—É –ê–ë–û –ü–û–í–ù–ê –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫—É—Ä º—î—Ä—Å—å–∫–æ—ó",\n'
        '  "items": [ {"country":"–ö–†–ê–á–ù–ê","qty":N,"operator":"O2|Lebara|Vodafone"}, ... ]\n'
        "}\n\n"
        "–Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –ø—Ä–æ—Å–∏—Ç—å –∫—É—Ä º—î—Ä—Å—å–∫—É/–∞–¥—Ä–µ—Å–Ω—É –¥–æ—Å—Ç–∞–≤–∫—É ‚Äî –ù–ï —Å—Ç—Ä—É–∫—Ç—É—Ä—É–π –ø—É–Ω–∫—Ç 3. –ó–∞–ø–∏—à–∏ –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É —Ç–∞–∫, —è–∫ –Ω–∞–ø–∏—Å–∞–≤ –∫–ª—ñ—î–Ω—Ç, —É –ø–æ–ª–µ \"np\" (–ø–æ–ª–µ \"city\" –º–æ–∂–Ω–∞ –ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º).\n\n"

        # === –ü–†–ê–ô–°/–ù–ê–Ø–í–ù–Ü–°–¢–¨ ===
        "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î –ü–†–û –¶–Ü–ù–ò –∞–±–æ –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON:\n"
        "{\n"
        '  "ask_prices": true,\n'
        '  "countries": ["ALL" –∞–±–æ –ø–µ—Ä–µ–ª—ñ–∫ –∫–ª—é—á—ñ–≤, –Ω–∞–ø—Ä. "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø","–°–®–ê"]\n'
        "}\n\n"

        # === –î–û–í–Ü–î–ö–ê USSD ===
        "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î, —è–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è/–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä –Ω–∞ SIM ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON:\n"
        "{\n"
        '  "ask_ussd": true,\n'
        '  "targets": [ {"country":"–ö–†–ê–á–ù–ê","operator":"–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: O2|Lebara|Vodafone|Movistar|Lycamobile|T-mobile|Kaktus"}, ... ]\n'
        "}\n"
        "–Ø–∫—â–æ –∫—Ä–∞—ó–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ ‚Äî –£–¢–û–ß–ù–ò.\n\n"

        # === –î–û–°–¢–£–ü–ù–Ü –î–õ–Ø –ü–†–û–î–ê–ñ–£ ===
        "–î–ª—è –ø—Ä–∞–π—Å—É/–Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –õ–ò–®–ï: –í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø, –ù–Ü–î–ï–†–õ–ê–ù–î–ò, –Ü–°–ü–ê–ù–Ü–Ø, –ü–û–†–¢–£–ì–ê–õ–Ü–Ø, –Ü–¢–ê–õ–Ü–Ø, –§–†–ê–ù–¶–Ü–Ø, –ù–ò–ú–ï–ß–ß–ò–ù–ê, –ë–ï–õ–¨–ì–Ü–Ø, –ß–ï–•–Ü–Ø, –ü–û–õ–¨–©–ê, –õ–ò–¢–í–ê, –õ–ê–¢–í–Ü–Ø, –ö–ê–ó–ê–•–°–¢–ê–ù, –ú–ê–†–û–ö–ö–û, –°–®–ê.\n"
        "–ù–µ —Å—Ç–≤–µ—Ä–¥–∂—É–π –Ω–∞—è–≤–Ω—ñ—Å—Ç—å/—Ü—ñ–Ω—É –¥–ª—è —ñ–Ω—à–∏—Ö –∫—Ä–∞—ó–Ω (–∞–ª–µ –¥–æ–≤—ñ–¥–∫—É USSD –º–æ–∂–Ω–∞ –¥–∞–≤–∞—Ç–∏ —ñ –¥–ª—è —ñ–Ω—à–∏—Ö, —è–∫—â–æ –≤—ñ–¥–æ–º–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è).\n\n"

        # === –°–ï–ú–ê–ù–¢–ò–ö–ê ===
        "–ù–µ –¥—É–±–ª—é–π —Ü—ñ–Ω–∏ —è–∫—â–æ –≤–∂–µ –Ω–∞–¥–∞–≤ —ó—Ö —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∞–±–æ –≤–æ–Ω–∏ –¥—É–∂–µ –±–ª–∏–∑—å–∫–æ –≤ —á–∞—Ç—ñ. –£–Ω–∏–∫–∞–π –∑–∞–π–≤–æ—ó –±–∞–ª–∞–∫–∞–Ω–∏–Ω–∏. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç–∏—Å–ª–æ, –∞–ª–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.\n"
        "–Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –∑–∞–¥–∞—î –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è —ñ –≤ –π–æ–≥–æ —Ç–µ–∫—Å—Ç—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî –≤—Å–µ –æ–¥–Ω–æ –¥–æ–¥–∞–≤–∞–π —ó—Ö —É —á–µ—Ä–Ω–µ—Ç–∫—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è.\n"
        "–ö–æ–ª–∏ –≤–∏–Ω–∏–∫–∞—î –¥–≤–æ–∑–Ω–∞—á–Ω—ñ—Å—Ç—å ‚Äî –Ω–µ –≤–∏–≥–∞–¥—É–π, –ø–µ—Ä–µ–ø–∏—Ç–∞–π.\n\n"

        # === –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è (FAQ) ===
        "–ß–∏ –ø—Ä–∏–π–º–∞—é—Ç—å SIM –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ SMS?\n"
        "–¢–∞–∫, –º–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–æ–±–∏—Ä–∞—î–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤, —â–æ –ø—Ä–∏–π–º–∞—é—Ç—å SMS –±–∞–Ω–∫—ñ–≤. –Ø–∫—â–æ —É –≤–∞—Å —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –±–∞–Ω–∫ ‚Äî —É—Ç–æ—á–Ω—ñ—Ç—å, —ñ –º–∏ –ø—ñ–¥–∫–∞–∂–µ–º–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "Lebara —á–∏ O2 ‚Äî —â–æ –∫—Ä–∞—â–µ?\n"
        "–ü—Ä–∏–Ω—Ü–∏–ø–æ–≤–æ—ó —Ä—ñ–∑–Ω–∏—Ü—ñ –Ω–µ–º–∞—î: —É—Å—ñ SIM –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ (—è–∫—â–æ –∫—Ä–∞—ó–Ω–∞ –≤–∏–º–∞–≥–∞—î) —ñ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞ –ø—Ä–∏–π–æ–º SMS.\n\n"
        "–¶–µ –Ω–æ–≤—ñ —Å—ñ–º-–∫–∞—Ä—Ç–∏?\n"
        "–¢–∞–∫, –Ω–æ–≤—ñ, –Ω—ñ–¥–µ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å.\n\n"
        "–ß–∏ –¥–∞—î—Ç–µ –≥–∞—Ä–∞–Ω—Ç—ñ—ó?\n"
        "–Ø–∫—â–æ SIM –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ (—á–æ–≥–æ –º–∞–∂–µ –Ω–µ —Ç—Ä–∞–ø–ª—è—î—Ç—å—Å—è), —Ç–æ –º–∏ –∑—Ä–æ–±–∏–º–æ –∑–∞–º—ñ–Ω—É –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–º–æ –∫–æ—à—Ç–∏.\n\n"
        "–ö–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–µ?\n"
        "–ó–∞–∑–≤–∏—á–∞–π —É –¥–µ–Ω—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω.\n\n"
        "–ß–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏? –ß–∏ —î –¢–¢–ù/—Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä?\n"
        "–ó–∞–∑–≤–∏—á–∞–π –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –¥–µ–Ω—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¢–¢–ù ‚Äî –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n\n"
        "–Ø–∫ –æ–ø–ª–∞—Ç–∏—Ç–∏?\n"
        "–ó–∞–∑–≤–∏—á–∞–π –Ω–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂. –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º ‚Äî –∫–∞—Ä—Ç–∞ –∞–±–æ USDT (TRC-20).\n\n"
        "–ß–∏ –º–æ–∂–ª–∏–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —ñ–Ω—à—ñ –∫—Ä–∞—ó–Ω–∏?\n"
        "–¢–∞–∫, –≤—ñ–¥ 3 —à—Ç, –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, ¬´–ù–æ–≤–∞ –ü–æ—à—Ç–∞¬ª.\n\n"
        "–Ø–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫—Ä–∞—ó–Ω–∏?\n"
        "–¢–∏ –Ω–µ –ø—Ä–æ–ø–æ–Ω—É—î—à –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ —Å–∞–º, —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î—à, –∫–æ–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∑–∞–ø–∏—Ç–∞—é—Ç—å. –î–ª—è –ê–Ω–≥–ª—ñ—ó (UK) –º–æ–∂–ª–∏–≤—ñ O2, Lebara, Vodafone, Three; —è–∫—â–æ –∫–ª—ñ—î–Ω—Ç –ø–∏—Ç–∞—î ¬´—è–∫–∏–π –±—É–¥–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä?¬ª ‚Äî –Ω–µ –≤–∏–≥–∞–¥—É–π, –∞ —Å–∫–∞–∂–∏, —â–æ –≤ —Ä–æ–±–æ—Ç—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä Lebara (–∞–±–æ —Ç–æ–π, —â–æ —î) –Ω—ñ—á–∏–º –Ω–µ –≥—ñ—Ä—à–∏–π.\n"
    )

# ==== OpenAI (–æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó) ====
async def _openai_chat(messages: List[Dict[str, str]]) -> str:
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4o",
            messages=messages,
            temperature=0.2,
            max_tokens=800
        )
        return response.choices[0].message["content"]
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        return ""

async def _ask_gpt_main(history: List[Dict[str, str]], user_payload: Dict[str, Any]) -> str:
    sys_prompt = build_system_prompt()
    messages = [{"role": "system", "content": sys_prompt}] + history
    return await _openai_chat(messages)

# ==== –ú–µ–Ω–µ–¥–∂–µ—Ä—Å—å–∫—ñ —Ö–µ–ª–ø–µ—Ä–∏ ====
def _is_ack_only(text: str) -> bool:
    t = (text or "").strip().lower()
    return t in {"–æ–∫", "–æ–∫–µ–π", "–¥—è–∫—É—é", "–¥—è–∫—É—é!", "–¥—è–∫–∞", "thx", "thanks", "tx", "—Å–ø—Å", "—Å–ø–∞—Å–∏–±–æ", "–¥—è–∫—É—é.", "‚úÖ", "üëç", "–¥—è–∫—É—é‚ù§Ô∏è", "–¥—è–∫—É—é –¥—É–∂–µ"} or t.endswith("–¥—è–∫—É—é") or t.endswith("–¥—è–∫—É—é!")

# ==== –ê–Ω—Ç–∏–¥—É–±–ª—å (–≤—ñ–∫–Ω–æ 20 —Ö–≤) ====
_last_order_signature: Dict[int, Tuple[str, float]] = {}

def is_duplicate_order(chat_id: int, order: OrderData) -> bool:
    sig = _order_signature(order)
    now = time.time()
    last = _last_order_signature.get(chat_id)
    if last and last[0] == sig and now - last[1] <= 20 * 60:
        return True
    _last_order_signature[chat_id] = (sig, now)
    return False

# ==== –†–µ–Ω–¥–µ—Ä –¥–ª—è –≥—Ä—É–ø–∏ ====
def render_order_for_group(order: OrderData, paid: bool) -> str:
    """
    –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä –¥–ª—è –≥—Ä—É–ø–∏: –±–µ–∑ ¬´–¥—è–∫—É—î–º–æ¬ª —Ç–∞, —è–∫—â–æ paid=True, –∑–∞–º—ñ—Å—Ç—å —Ü—ñ–Ω–∏ –ø–∏—à–µ '(–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–µ)'.
    """
    lines = []
    grand_total = 0
    counted = 0
    for it in order.items:
        c_norm = normalize_country(it.country)
        disp_base = DISPLAY.get(c_norm, it.country.strip().title())
        op = canonical_operator(getattr(it, "operator", None))
        op_suf = f" (–æ–ø–µ—Ä–∞—Ç–æ—Ä {op})" if (op and c_norm == "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø") else ""
        disp = disp_base + op_suf
        flag = FLAGS.get(c_norm, "")
        if paid:
            line_total_str = "(–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–µ)"
            line = f"{flag} {disp}, {it.qty} —à—Ç ‚Äî {line_total_str}  \n"
        else:
            price = unit_price(c_norm, it.qty)
            if price is None:
                line_total_str = "–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞"
                line = f"{flag} {disp}, {it.qty} —à—Ç ‚Äî {line_total_str}  \n"
            else:
                line_total = price * it.qty
                grand_total += line_total
                counted += 1
                line = f"{flag} {disp}, {it.qty} —à—Ç ‚Äî {line_total} –≥—Ä–Ω  \n"
        lines.append(line)
    header = (
        f"{format_full_name(order.full_name)} \n"
        f"{format_phone(order.phone)}\n"
        f"{format_delivery_line(order.city, order.np)}  \n\n"
    )
    footer = ""
    if not paid and counted >= 2:
        footer = f"\n–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {grand_total} –≥—Ä–Ω\n"
    return header + "".join(lines) + footer

# ==== OpenAI (–æ—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó) ====
async def _openai_prices(history: List[Dict[str, str]]) -> str:
    sys_prompt = build_system_prompt()
    messages = [{"role": "system", "content": sys_prompt}] + history
    return await _openai_chat(messages)

# ==== –ì–æ–ª–æ–≤–Ω–∏–π —Ö–µ–Ω–¥–ª–µ—Ä ====
PRICE_LINE_RE = re.compile(r"‚Äî (\d+ –≥—Ä–Ω|–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞)")
TOTAL_LINE_RE = re.compile(r"^–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: \d+ –≥—Ä–Ω")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg:
        logger.warning("No message")
        return
    raw_user_message = msg.text or msg.caption or ""
    if not raw_user_message:
        return

    # –Ü–≥–Ω–æ—Ä ¬´–¥—è–∫—É—é/–æ–∫¬ª (—É–Ω–∏–∫–∞—î–º–æ –∑–∞–π–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π)
    if _is_ack_only(raw_user_message):
        return

    # –ú–µ–Ω–µ–¥–∂–µ—Ä—Å—å–∫—ñ —Ç—Ä–∏–≥–µ—Ä–∏ –≤ –≥—Ä—É–ø—ñ
    if is_manager(update) and update.effective_chat and update.effective_chat.id == ORDER_GROUP_CHAT_ID:
        await handle_manager_command(update, context)
        return

    # –Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è GPT
    history: List[Dict[str, str]] = []
    # –í–∏—Ç—è–≥ reply-—Ç–µ–∫—Å—Ç–∞, —è–∫—â–æ —î
    if msg.reply_to_message and (msg.reply_to_message.text or msg.reply_to_message.caption):
        reply_text = msg.reply_to_message.text or msg.reply_to_message.caption
        history.append({"role": "user", "content": reply_text})
    history.append({"role": "user", "content": raw_user_message})

    # 1) –°–ø–µ—Ü-–∫–µ–π—Å: —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –°–®–ê
    if is_usa_activation_request(raw_user_message):
        await msg.reply_text(US_ACTIVATION_MSG)
        return

    # 2) –°–ø—Ä–æ–±–∞ –∑—á–∏—Ç–∞—Ç–∏ JSON-–ø—Ä–∞–π—Å / JSON-USSD / JSON-–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    reply_text = await _ask_gpt_main(history, {})
    # –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å —á–µ–∫-–ª–∏—Å—Ç–∞, —è–∫—â–æ GPT –∑–∞–±—É–≤ –µ–º–æ–¥–∑—ñ
    if "–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:" in reply_text and "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:" not in reply_text:
        reply_text = reply_text.replace("–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:", "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:")

    # –Ø–∫—â–æ GPT –ø–æ–≤–µ—Ä–Ω—É–≤ US-—ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —á–µ—Ä–µ–∑ JSON
    if try_parse_usa_activation_json(reply_text):
        await msg.reply_text(US_ACTIVATION_MSG)
        return

    # –Ø–∫—â–æ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ —Ü—ñ–Ω–∏
    price_countries = try_parse_price_json(reply_text)
    if price_countries:
        prices = render_prices(price_countries)
        await msg.reply_text(prices)
        return

    # –Ø–∫—â–æ –∑–∞–ø–∏—Ç—É–≤–∞–ª–∏ USSD-–∫–æ–¥–∏
    ussd_targets = try_parse_ussd_json(reply_text)
    if ussd_targets:
        ussd = render_ussd(ussd_targets)
        await msg.reply_text(ussd)
        return

    # –Ø–∫—â–æ GPT –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–≤–Ω–∏–π JSON –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    order = try_parse_order_json(reply_text)
    if order and order.items:
        if is_duplicate_order(update.effective_chat.id, order):
            await msg.reply_text("–î—è–∫—É—î–º–æ! –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–µ. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")
            return

        # –†–µ–Ω–¥–µ—Ä –ø—ñ–¥—Å—É–º–∫—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞
        summary = render_order(order)
        await msg.reply_text(summary)

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ –≥—Ä—É–ø—É (–±–µ–∑ ¬´–¥—è–∫—É—î–º–æ¬ª —ñ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é ¬´–æ–ø–ª–∞—á–µ–Ω–æ¬ª)
        try:
            await context.bot.send_message(
                chat_id=ORDER_GROUP_CHAT_ID,
                text=render_order_for_group(order, paid=False),
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É: {e}")
        return

    # –Ø–∫—â–æ GPT –ø–æ–≤–µ—Ä–Ω—É–≤ ¬´—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø—Ä–µ–ª–æ–∞–¥¬ª –∑–∞–º—ñ—Å—Ç—å —á–µ–∫-–ª–∏—Å—Ç–∞ (—ñ–Ω–∫–æ–ª–∏)
    if reply_text.strip().startswith("üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è") and context.chat_data.get("awaiting_missing") == {1, 2, 3}:
        reply_text = (
            "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:\n\n"
            "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
            "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
            "3. –ê–¥—Ä–µ—Å–∞ –¥–ª—è –∫—É—Ä º—î—Ä—Å—å–∫–æ—ó (–∞–±–æ –º—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è \"–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\").\n"
        )

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–π—à–ª–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ, —â–æ –¥–∞–≤ GPT (–º–æ–∂–ª–∏–≤–æ, —Ü–µ —á–µ–∫-–ª–∏—Å—Ç)
    await msg.reply_text(reply_text)

# ==== –ú–µ–Ω–µ–¥–∂–µ—Ä—Å—å–∫—ñ –¥—ñ—ó —É –≥—Ä—É–ø—ñ ====
async def handle_manager_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg or not msg.reply_to_message:
        return
    text = (msg.text or "").strip().lower()

    # –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –æ–ø–ª–∞—Ç—É
    if "–æ–ø–ª–∞—á–µ–Ω–æ" in text or "–±–µ–∑ –Ω–∞–ª" in text or "–±–µ–∑–Ω–∞–ª" in text:
        await mark_paid(update, context)
        return

    # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è UK
    for op_key, op_canon in [("o2", "O2"), ("lebara", "Lebara"), ("vodafone", "Vodafone"), ("three", "Three")]:
        if op_key in text:
            await set_operator_for_uk(update, context, op_canon)
            return

async def mark_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_msg = update.effective_message.reply_to_message
    if not reply_msg:
        return

    lines = (reply_msg.text or "").splitlines(keepends=True)
    new_lines: List[str] = []
    for ln in lines:
        if PRICE_LINE_RE.search(ln):
            new_lines.append(re.sub(r"‚Äî (\d+ –≥—Ä–Ω|–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞)", "‚Äî (–∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–ø–ª–∞—á–µ–Ω–µ)", ln))
        elif TOTAL_LINE_RE.match(ln.strip()):
            continue
        else:
            new_lines.append(ln)
    try:
        await reply_msg.edit_text("".join(new_lines))
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–∑–Ω–∞—á–∏—Ç–∏ '–æ–ø–ª–∞—á–µ–Ω–æ': {e}")

async def set_operator_for_uk(update: Update, context: ContextTypes.DEFAULT_TYPE, operator: str):
    reply_msg = update.effective_message.reply_to_message
    if not reply_msg:
        return
    lines = (reply_msg.text or "").splitlines(keepends=True)
    new_lines: List[str] = []
    for ln in lines:
        # üá¨üáß –ê–Ω–≥–ª—ñ—è, 2 —à—Ç ‚Äî 650 –≥—Ä–Ω
        if ln.strip().startswith("üá¨üáß") and "–ê–Ω–≥–ª—ñ—è" in ln:
            ln = ln.replace("–ê–Ω–≥–ª—ñ—è", f"–ê–Ω–≥–ª—ñ—è (–æ–ø–µ—Ä–∞—Ç–æ—Ä {operator})")
        new_lines.append(ln)
    try:
        await reply_msg.edit_text("".join(new_lines))
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ UK: {e}")

# ==== –ö–æ–º–∞–Ω–¥–∏ ====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –î–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ SIM-–∫–∞—Ä—Ç–∏, –∞ —Ç–∞–∫–æ–∂ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤—Å—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(ORDER_INFO_REQUEST)

# ==== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ====
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.ALL & (~filters.COMMAND), handle_message))

    logger.info("Bot started.")
    app.run_polling()

if __name__ == "__main__":
    main()
