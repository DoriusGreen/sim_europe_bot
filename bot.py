# bot.py
import os
import time
import logging
from typing import List, Dict, Optional, Set, Any, Tuple
from dataclasses import dataclass
import json
import re

from telegram import Update, Message
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===== –ö–ª—é—á—ñ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", "8443"))

openai.api_key = OPENAI_API_KEY

# ==== –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –ø–∞–º'—è—Ç—ñ/–º—ñ—Ç–æ–∫ ====
MAX_TURNS = 14
ORDER_DUP_WINDOW_SEC = 20 * 60  # 20 —Ö–≤–∏–ª–∏–Ω

# ==== –ö–£–î–ê –î–£–ë–£–Æ –Ñ –ó–ê–ú–û–í–õ–ï–ù–ù–Ø (–ì–†–£–ü–ê) ====
ORDER_FORWARD_CHAT_ID = int(os.getenv("ORDER_FORWARD_CHAT_ID", "-4832242322"))

# ==== –Ü–≥–Ω–æ—Ä/–≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ====
def _parse_ids(env: Optional[str]) -> Set[int]:
    out: Set[int] = set()
    if not env:
        return out
    for x in env.split(","):
        x = x.strip()
        if not x:
            continue
        try:
            out.add(int(x))
        except ValueError:
            pass
    return out

def _parse_usernames(env: Optional[str]) -> Set[str]:
    out: Set[str] = set()
    if not env:
        return out
    for x in env.split(","):
        x = x.strip().lstrip("@").lower()
        if x:
            out.add(x)
    return out

DEFAULT_OWNER_USERNAME = os.getenv("OWNER_USERNAME", "Sim_Card_Three")
DEFAULT_OWNER_USER_ID = os.getenv("OWNER_USER_ID", "")

MANAGER_USER_IDS = _parse_ids(os.getenv("MANAGER_USER_IDS"))
if DEFAULT_OWNER_USER_ID:
    MANAGER_USER_IDS |= _parse_ids(DEFAULT_OWNER_USER_ID)

MANAGER_USERNAMES = _parse_usernames(os.getenv("MANAGER_USERNAMES"))
if DEFAULT_OWNER_USERNAME:
    MANAGER_USERNAMES.add(DEFAULT_OWNER_USERNAME.strip().lstrip("@").lower())

def _is_manager_message(msg: Message) -> bool:
    u = msg.from_user
    if not u:
        return False
    if MANAGER_USER_IDS and u.id in MANAGER_USER_IDS:
        return True
    if MANAGER_USERNAMES and u.username and u.username.lower() in MANAGER_USERNAMES:
        return True
    return False

# ==== –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ====
ORDER_INFO_REQUEST = (
    "üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø–∏—à—ñ—Ç—å:\n\n"
    "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
    "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
    "3. –ú—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è \"–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\".\n"
    "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç."
)

# ==== –ü—Ä–∞–π—Å–∏ –π –º–∞–ø–∏ –∫—Ä–∞—ó–Ω (–î–û–°–¢–£–ü–ù–Ü –¢–Ü–õ–¨–ö–ò –¶–Ü) ====
PRICE_TIERS = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": [(1000, None), (100, 210), (20, 250), (10, 275), (4, 300), (2, 325), (1, 350)],
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò":     [(20, 700), (4, 750), (1, 800)],
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê":      [(10, 900), (4, 1000), (1, 1100)],
    "–§–†–ê–ù–¶–Ü–Ø":        [(10, 1100), (4, 1200), (1, 1400)],
    "–Ü–°–ü–ê–ù–Ü–Ø":        [(10, 800), (4, 850), (1, 900)],
    "–ß–ï–•–Ü–Ø":          [(10, 650), (4, 700), (1, 750)],
    "–ü–û–õ–¨–©–ê":         [(10, 400), (4, 450), (1, 500)],
    "–õ–ò–¢–í–ê":          [(10, 650), (4, 700), (1, 750)],
    "–õ–ê–¢–í–Ü–Ø":         [(10, 650), (4, 700), (1, 750)],
    "–ö–ê–ó–ê–•–°–¢–ê–ù":      [(10, 900), (4, 1000), (2, 1100), (1, 1200)],
    "–ú–ê–†–û–ö–ö–û":        [(10, 750), (4, 800), (2, 900), (1, 1000)],
    "–°–®–ê":            [(10, 1000), (4, 1300), (1, 1400)],
}
FLAGS = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": "üá¨üáß",
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": "üá≥üá±",
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê": "üá©üá™",
    "–§–†–ê–ù–¶–Ü–Ø": "üá´üá∑",
    "–Ü–°–ü–ê–ù–Ü–Ø": "üá™üá∏",
    "–ß–ï–•–Ü–Ø": "üá®üáø",
    "–ü–û–õ–¨–©–ê": "üáµüá±",
    "–õ–ò–¢–í–ê": "üá±üáπ",
    "–õ–ê–¢–í–Ü–Ø": "üá±üáª",
    "–ö–ê–ó–ê–•–°–¢–ê–ù": "üá∞üáø",
    "–ú–ê–†–û–ö–ö–û": "üá≤üá¶",
    "–°–®–ê": "üá∫üá∏",
    "–Ü–¢–ê–õ–Ü–Ø": "üáÆüáπ",
    "–ú–û–õ–î–û–í–ê": "üá≤üá©",
}
DISPLAY = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": "–ê–Ω–≥–ª—ñ—è",
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": "–ù—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏",
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê": "–ù—ñ–º–µ—á—á–∏–Ω–∞",
    "–§–†–ê–ù–¶–Ü–Ø": "–§—Ä–∞–Ω—Ü—ñ—è",
    "–Ü–°–ü–ê–ù–Ü–Ø": "–Ü—Å–ø–∞–Ω—ñ—è",
    "–ß–ï–•–Ü–Ø": "–ß–µ—Ö—ñ—è",
    "–ü–û–õ–¨–©–ê": "–ü–æ–ª—å—â–∞",
    "–õ–ò–¢–í–ê": "–õ–∏—Ç–≤–∞",
    "–õ–ê–¢–í–Ü–Ø": "–õ–∞—Ç–≤—ñ—è",
    "–ö–ê–ó–ê–•–°–¢–ê–ù": "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
    "–ú–ê–†–û–ö–ö–û": "–ú–∞—Ä–æ–∫–∫–æ",
    "–°–®–ê": "–°–®–ê",
    "–Ü–¢–ê–õ–Ü–Ø": "–Ü—Ç–∞–ª—ñ—è",
    "–ú–û–õ–î–û–í–ê": "–ú–æ–ª–¥–æ–≤–∞",
}
DIAL_CODES = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": "+44",
    "–Ü–°–ü–ê–ù–Ü–Ø": "+34",
    "–§–†–ê–ù–¶–Ü–Ø": "+33",
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê": "+49",
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": "+31",
    "–Ü–¢–ê–õ–Ü–Ø": "+39",
    "–ß–ï–•–Ü–Ø": "+420",
    "–ú–û–õ–î–û–í–ê": "+373",
    "–ö–ê–ó–ê–•–°–¢–ê–ù": "+7",
    "–õ–ê–¢–í–Ü–Ø": "+371",
    "–°–®–ê": "+1",
}

def normalize_country(name: str) -> str:
    n = (name or "").strip().upper()
    if n in ("–ê–ù–ì–õ–Ü–Ø", "–ë–†–ò–¢–ê–ù–Ü–Ø", "UK", "U.K.", "UNITED KINGDOM", "–í–ë", "GREAT BRITAIN", "+44", "–Æ–ö", "–£.–ö."):
        return "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø"
    if n in ("USA", "U.S.A.", "UNITED STATES", "UNITED STATES OF AMERICA", "–®–¢–ê–¢–ò", "–ê–ú–ï–†–ò–ö–ê", "US", "U.S."):
        return "–°–®–ê"
    if n in ("ITALY","–ò–¢–ê–õ–ò–Ø","–Ü–¢–ê–õ–Ü–Ø","ITALIA","+39"):
        return "–Ü–¢–ê–õ–Ü–Ø"
    if n in ("–ú–û–õ–î–û–í–ê","MOLDOVA","+373"):
        return "–ú–û–õ–î–û–í–ê"
    return n

# ---------- –û–ü–ï–†–ê–¢–û–†–ò –î–õ–Ø –ê–ù–ì–õ–Ü–á (–¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è) ----------
def canonical_operator(op: Optional[str]) -> Optional[str]:
    if not op:
        return None
    o = op.strip().lower()
    if o in ("o2", "–æ2"):
        return "O2"
    if o in ("lebara", "–ª–µ–±–∞—Ä–∞"):
        return "Lebara"
    if o in ("vodafone", "–≤–æ–¥–∞—Ñ–æ–Ω", "–≤–æ–¥–æ—Ñ–æ–Ω"):
        return "Vodafone"
    return None

# ---------- –û–ü–ï–†–ê–¢–û–†–ò –î–õ–Ø USSD (–¥–æ–≤—ñ–¥–∫–∞) ----------
def canonical_operator_any(op: Optional[str]) -> Optional[str]:
    if not op:
        return None
    o = op.strip().lower()
    mapping = {
        "O2": ["o2","–æ2"],
        "Lebara": ["lebara","–ª–µ–±–∞—Ä–∞"],
        "Vodafone": ["vodafone","–≤–æ–¥–∞—Ñ–æ–Ω","–≤–æ–¥–æ—Ñ–æ–Ω"],
        "Movistar": ["movistar","–º–æ–≤—ñ—Å—Ç–∞—Ä","–º–æ–≤–∏—Å—Ç–∞—Ä"],
        "Lycamobile": ["lycamobile","lyca","lyka","–ª–∞–π–∫–∞–º–æ–±–∞–π–ª","–ª–∞–π–∫–∞"],
        "T-mobile": ["t-mobile","t mobile","—Ç-–º–æ–±–∞–π–ª","—Ç –º–æ–±–∞–π–ª","tmobile","t–º–æ–±–∞–π–ª"],
        "Kaktus": ["kaktus","–∫–∞–∫—Ç—É—Å"],
    }
    for canon, alts in mapping.items():
        if o in alts:
            return canon
    return None

def unit_price(country_norm: str, qty: int) -> Optional[int]:
    tiers = PRICE_TIERS.get(country_norm)
    if not tiers:
        return None
    for min_q, price in tiers:
        if qty >= min_q:
            return price
    return None

# ==== –†–ï–ù–î–ï–† –ü–†–ê–ô–°–Ü–í ====
def _format_range(min_q: int, max_q: Optional[int]) -> str:
    if max_q is None: return f"{min_q}+ —à—Ç."
    if min_q == max_q: return f"{min_q} —à—Ç."
    return f"{min_q}-{max_q} —à—Ç."

def render_price_block(country_key: str) -> str:
    flag = FLAGS.get(country_key, "")
    header = f"{flag} {country_key} {flag}\n\n"
    tiers = PRICE_TIERS.get(country_key, [])
    if not tiers:
        return header + "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.\n\n"
    tiers_sorted = sorted(tiers, key=lambda x: x[0])
    lines = []
    inserted_gap = False
    for idx, (min_q, price) in enumerate(tiers_sorted):
        next_min = tiers_sorted[idx + 1][0] if idx + 1 < len(tiers_sorted) else None
        max_q = (next_min - 1) if next_min else None
        if not inserted_gap and min_q >= 100 and idx > 0:
            lines.append("")
            inserted_gap = True
        qty_part = _format_range(min_q, max_q)
        line = f"{qty_part} ‚Äî {'–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞' if price is None else str(price) + ' –≥—Ä–Ω'}"
        lines.append(line)
    return header + "\n".join(lines) + "\n\n"

def available_list_text() -> str:
    names = [DISPLAY[k] for k in PRICE_TIERS.keys()]
    if len(names) == 1: return names[0]
    return ", ".join(names[:-1]) + " —Ç–∞ " + names[-1]

def render_prices(countries: List[str]) -> str:
    blocks = []
    for c in countries:
        key = normalize_country(c).upper()
        if key in PRICE_TIERS:
            blocks.append(render_price_block(key))
    return "".join(blocks)

def render_unavailable(unavail: List[str]) -> str:
    names = [str(x).strip() for x in unavail if str(x).strip()]
    if not names:
        return ""
    if len(names) == 1:
        return f"–ù–∞ –∂–∞–ª—å, {names[0]} SIM-–∫–∞—Ä—Ç–∏ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {available_list_text()}."
    return f"–ù–∞ –∂–∞–ª—å, {', '.join(names)} –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ. –£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: {available_list_text()}."

# ==== –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ü–Ü–î–°–£–ú–ö–£ ====
def _cap_word(w: str) -> str:
    return w[:1].upper() + w[1:].lower() if w else w

def _smart_title(s: str) -> str:
    s = (s or "").strip()
    parts = re.split(r"\s+", s)
    out = []
    for p in parts:
        sub = "-".join(_cap_word(x) for x in p.split("-"))
        out.append(sub)
    return " ".join(out)

def format_full_name(name: str) -> str:
    tokens = [t for t in (name or "").strip().split() if t]
    if not tokens:
        return ""
    if len(tokens) >= 2:
        return f"{_smart_title(tokens[0])} {_smart_title(tokens[-1])}"
    return _smart_title(tokens[0])

def format_phone(phone: str) -> str:
    digits = re.sub(r"\D", "", phone or "")
    if len(digits) == 12 and digits.startswith("380"):
        digits = "0" + digits[3:]
    if len(digits) == 10:
        return f"{digits[0:3]} {digits[3:6]} {digits[6:10]}"
    return (phone or "").strip()

def _split_city_extra(city: str):
    s = " ".join((city or "").split())
    m = re.match(r"(.+?)\s*\((.+)\)\s*$", s)
    if m:
        return m.group(1), m.group(2)
    parts = re.split(r"\s*[,;/‚Äî‚Äì-]\s*", s, maxsplit=1)
    if len(parts) == 2:
        return parts[0], parts[1]
    return s, None

def format_city(city: str) -> str:
    base, extra = _split_city_extra(city)
    base_fmt = _smart_title(base)
    if extra:
        extra_fmt = _smart_title(extra)
        return f"{base_fmt} ({extra_fmt})"
    return base_fmt

def format_np(np_str: str) -> str:
    s = (np_str or "").strip()
    m = re.search(r"\d+", s)
    if m:
        return m.group(0)
    s = re.sub(r"[^\d]", "", s)
    return s or (np_str or "").strip()

ORDER_LINE = "{flag} {disp}, {qty} —à—Ç ‚Äî {line_total} –≥—Ä–Ω  \n"

@dataclass
class OrderItem:
    country: str
    qty: int
    operator: Optional[str] = None

@dataclass
class OrderData:
    full_name: str
    phone: str
    city: str
    np: str
    items: List[OrderItem]

def _order_signature(order: OrderData) -> str:
    items_sig = ";".join(
        f"{normalize_country(it.country)}:{int(it.qty)}:{canonical_operator(it.operator) or ''}"
        for it in order.items
    )
    return f"{format_full_name(order.full_name)}|{format_phone(order.phone)}|{format_city(order.city)}|{format_np(order.np)}|{items_sig}"

def render_order(order: OrderData) -> str:
    lines = []
    grand_total = 0
    counted_countries = 0

    for it in order.items:
        c_norm = normalize_country(it.country)
        disp_base = DISPLAY.get(c_norm, it.country.strip().title())
        op = canonical_operator(getattr(it, "operator", None))
        op_suf = f" (–æ–ø–µ—Ä–∞—Ç–æ—Ä {op})" if (op and c_norm == "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø") else ""
        disp = disp_base + op_suf

        flag = FLAGS.get(c_norm, "")
        price = unit_price(c_norm, it.qty)

        if price is None:
            line_total_str = "–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞"
        else:
            line_total = price * it.qty
            grand_total += line_total
            counted_countries += 1
            line_total_str = str(line_total)

        lines.append(ORDER_LINE.format(
            flag=flag, disp=disp, qty=it.qty, line_total=line_total_str
        ))

    header = (
        f"{format_full_name(order.full_name)} \n"
        f"{format_phone(order.phone)}\n"
        f"{format_city(order.city)} ‚Ññ {format_np(order.np)}  \n\n"
    )
    body = "".join(lines) + "\n"
    footer = f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–º–∞: {grand_total} –≥—Ä–Ω\n" if counted_countries >= 2 else ""
    return header + body + footer

# ==== JSON –ø–∞—Ä—Å–µ—Ä–∏ ====
ORDER_JSON_RE = re.compile(r"\{[\s\S]*\}")
PRICE_JSON_RE = re.compile(r"\{[\s\S]*\}")
USSD_JSON_RE = re.compile(r"\{[\s\S]*\}")

def try_parse_order_json(text: str) -> Optional[OrderData]:
    m = ORDER_JSON_RE.search(text or "")
    if not m:
        return None
    try:
        data = json.loads(m.group(0))
        items = [OrderItem(
            country=i["country"],
            qty=int(i["qty"]),
            operator=i.get("operator")
        ) for i in data.get("items", [])]
        return OrderData(
            full_name=data.get("full_name", "").strip(),
            phone=data.get("phone", "").strip(),
            city=data.get("city", "").strip(),
            np=str(data.get("np", "")).strip(),
            items=items
        )
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON: {e}")
        return None

def try_parse_price_json(text: str) -> Optional[List[str]]:
    m = PRICE_JSON_RE.search(text or "")
    if not m:
        return None
    try:
        data = json.loads(m.group(0))
        if data.get("ask_prices") is True and isinstance(data.get("countries"), list):
            return data["countries"]
        return None
    except Exception:
        return None

def try_parse_ussd_json(text: str) -> Optional[List[Dict[str, str]]]:
    m = USSD_JSON_RE.search(text or "")
    if not m:
        return None
    try:
        data = json.loads(m.group(0))
        if data.get("ask_ussd") is True and isinstance(data.get("targets"), list):
            out = []
            for t in data["targets"]:
                if not isinstance(t, dict):
                    continue
                c = t.get("country")
                o = t.get("operator")
                if c:
                    out.append({"country": c, "operator": o})
            return out or None
        return None
    except Exception:
        return None

# ==== –í–∏—Ç—è–≥ ¬´—á–æ–≥–æ –±—Ä–∞–∫—É—î¬ª –∑—ñ —Å–ª—É–∂–±–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ====
def missing_points_from_reply(text: str) -> Set[int]:
    out: Set[int] = set()
    if "–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏" not in (text or ""):
        return out
    for ln in (text or "").splitlines():
        m = re.match(r"\s*([1-4])\.\s", ln)
        if m:
            out.add(int(m.group(1)))
    return out

# ==== –°–®–ê: —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è —Ç–∞ –¥–µ—Ç–µ–∫—Ç ====
US_ACTIVATION_MSG = (
    "–°–®–ê, –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ —ñ–Ω—à–∏—Ö, –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó. –ü—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è SIM –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –Ω–∞ –ø—Ä–∏–π–æ–º SMS.\n\n"
    "–Ø–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–∞ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ —Å—ñ–º-–∫–∞—Ä—Ç—É –°–®–ê?\n\n"
    "https://www.lycamobile.us/en/activate-sim\n"
    "1. –ù–∞ —Ü—å–æ–º—É —Å–∞–π—Ç—ñ –≤–≤–æ–¥–∏—Ç–µ –¥–∞–Ω—ñ —Å—ñ–º–∫–∏ –¥–ª—è —ó—ó –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó. –û—Ç—Ä–∏–º–∞–Ω–∏–π –Ω–∞ —Å–∞–π—Ç—ñ –Ω–æ–º–µ—Ä —Å—ñ–º-–∫–∞—Ä—Ç–∏ –∑–∞–ø–∏—Å—É—î—Ç–µ.\n\n"
    "https://www.lycamobile.us/en/quick-top-up/\n"
    "2. –î–∞–ª—ñ, –æ—Å—å —Ç—É—Ç, –≤–∫–∞–∑–∞–≤—à–∏ –Ω–æ–º–µ—Ä, –æ—Ç—Ä–∏–º–∞–Ω–∏–π –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É —Å–∞–π—Ç—ñ, –ø–æ–ø–æ–≤–Ω—é—î—Ç–µ —Å—ñ–º-–∫–∞—Ä—Ç—É, –ø—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (–º—ñ–Ω—ñ–º—É–º –Ω–∞ 23$) –≤–æ–Ω–∞ —Å—Ç–∞–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—é —Ç–∞ –±—É–¥–µ –ø—Ä–∏–π–º–∞—Ç–∏ SMS."
)

def user_mentions_usa(text: str) -> bool:
    t = (text or "").lower()
    return bool(
        re.search(r"\b(—Å—à–∞|usa|u\.s\.a\.|united states|—à—Ç–∞—Ç[–∞-—è—ñ—ó—î]+|–∞–º–µ—Ä–∏–∫[–∞–∏])\b", t)
        or re.search(r"(^|\s)\+1(\s|$)", t)
    )

def contains_us_activation_block(text: str) -> bool:
    t = (text or "").lower()
    return ("lycamobile.us/en/activate-sim" in t) or ("—è–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–∞ –ø–æ–ø–æ–≤–Ω–∏—Ç–∏ —Å—ñ–º-–∫–∞—Ä—Ç—É —Å—à–∞" in t)

# ==== –î–û–í–Ü–î–ù–ò–ö USSD –ö–û–ú–ë–Ü–ù–ê–¶–Ü–ô ====
USSD_DATA: Dict[str, List[Tuple[Optional[str], str]]] = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": [("Vodafone", "*#100#"), ("Lebara", "*#100#"), ("O2", "–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –Ω–µ–º–∞—î, –Ω–æ–º–µ—Ä –≤–∫–∞–∑–∞–Ω–∏–π –Ω–∞ —É–ø–∞–∫–æ–≤—Ü—ñ.")],
    "–Ü–°–ü–ê–ù–Ü–Ø": [("Lebara", "*321#"), ("Movistar", "*133#"), ("Lycamobile", "*321#")],
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê": [("Vodafone", "*135#"), ("Lebara", "*135#"), ("Lycamobile", "*132#")],
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": [("Lycamobile", "*102#")],
    "–Ü–¢–ê–õ–Ü–Ø": [("Lycamobile", "*132#")],
    "–§–†–ê–ù–¶–Ü–Ø": [("Lebara", "*144*1#")],
    "–ß–ï–•–Ü–Ø": [("T-mobile", "*101#"), ("Kaktus", "*103#")],
    "–ú–û–õ–î–û–í–ê": [(None, "*444# (–ø–æ—Ç—ñ–º 3)")],
    "–ö–ê–ó–ê–•–°–¢–ê–ù": [(None, "*120#")],
    "–õ–ê–¢–í–Ü–Ø": [(None, "–ö–∏–Ω—å—Ç–µ –≤–∏–∫–ª–∏–∫ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–º–µ—Ä ‚Äî –≤–∞—à –ª–∞—Ç–≤—ñ–π—Å—å–∫–∏–π –Ω–æ–º–µ—Ä –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç—å—Å—è —É –≤–∏–∫–ª–∏–∫—É/–Ω–∞ –µ–∫—Ä–∞–Ω—ñ.")],
}
FALLBACK_PLASTIC_MSG = "–ù–æ–º–µ—Ä –≤–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫—É —Å—ñ–º-–∫–∞—Ä—Ç–∏"

def render_ussd_targets(targets: List[Dict[str, str]]) -> str:
    result_lines: List[str] = []
    for t in targets:
        country = normalize_country(t.get("country", "")).upper()
        if not country:
            continue
        op_req = canonical_operator_any(t.get("operator"))
        code_prefix = DIAL_CODES.get(country, "")
        flag = FLAGS.get(country, "")
        disp = DISPLAY.get(country, country.title())
        pairs = USSD_DATA.get(country, [])
        if op_req and pairs:
            pairs = [p for p in pairs if (p[0] and canonical_operator_any(p[0]) == op_req)]
        if not pairs:
            if op_req:
                result_lines.append(f"{code_prefix} {flag} {disp} (–æ–ø–µ—Ä–∞—Ç–æ—Ä {op_req}) ‚Äî {FALLBACK_PLASTIC_MSG}")
            else:
                result_lines.append(f"{code_prefix} {flag} {disp} ‚Äî {FALLBACK_PLASTIC_MSG}")
            result_lines.append("")
            continue
        for op, code in pairs:
            if op:
                result_lines.append(f"{code_prefix} {flag} {disp} (–æ–ø–µ—Ä–∞—Ç–æ—Ä {op}) ‚Äî {code}")
            else:
                result_lines.append(f"{code_prefix} {flag} {disp} ‚Äî {code}")
        result_lines.append("")
    while result_lines and result_lines[-1] == "":
        result_lines.pop()
    return "\n".join(result_lines).strip()

# ==== –í–∏—Ç—è–≥ –ø—Ä–æ—Ü–∏—Ç–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É ====
def extract_quoted_text(message: Optional[Message]) -> Optional[str]:
    if not message:
        return None
    rt = message.reply_to_message
    if not rt:
        return None
    text = (rt.text or rt.caption or "").strip()
    return text or None

# ==== –î–µ—Ç–µ–∫—Ç–æ—Ä ¬´—Ç—ñ–ª—å–∫–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å¬ª –ø—ñ—Å–ª—è –ø—Ä–∞–π—Å—É ====
QTY_ONLY_RE = re.compile(
    r"(?:\b–ø–æ\b\s*)?(\d{1,4})\s*(—à—Ç|—à—Ç—É–∫|—à—Ç\.?|—Å–∏–º(?:-?–∫–∞—Ä—Ç[–∞–∏])?|sim-?card|sim|pieces?)\b",
    re.IGNORECASE
)
def detect_qty_only(text: str) -> Optional[int]:
    if not text:
        return None
    m = QTY_ONLY_RE.search(text)
    if not m:
        return None
    try:
        return int(m.group(1))
    except Exception:
        return None

# ==== –ù–û–í–ï: –µ–≤—Ä–∏—Å—Ç–∏–∫–∞ ¬´–≤ —Å–∞–º–æ–º—É —Ç–µ–∫—Å—Ç—ñ —î —ñ –∫—Ä–∞—ó–Ω–∏, —ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ¬ª (–ø.4) ====
COUNTRY_KEYWORDS: Dict[str, List[str]] = {
    "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø": ["–∞–Ω–≥–ª", "–±—Ä–∏—Ç–∞–Ω", "–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω", "uk", "u.k", "great britain", "+44"],
    "–§–†–ê–ù–¶–Ü–Ø": ["—Ñ—Ä–∞–Ω—Ü", "france", "+33"],
    "–Ü–°–ü–ê–ù–Ü–Ø": ["—ñ—Å–ø–∞–Ω", "–∏—Å–ø–∞–Ω", "spain", "+34"],
    "–ù–Ü–ú–ï–ß–ß–ò–ù–ê": ["–Ω—ñ–º–µ—á", "–≥–µ—Ä–º–∞–Ω", "german", "+49", "deutsch"],
    "–ù–Ü–î–ï–†–õ–ê–ù–î–ò": ["–Ω—ñ–¥–µ—Ä–ª–∞–Ω", "–≥–æ–ª–ª–∞–Ω–¥", "holland", "nether", "+31"],
    "–Ü–¢–ê–õ–Ü–Ø": ["—ñ—Ç–∞–ª", "–∏—Ç–∞–ª", "ital", "+39"],
    "–ß–ï–•–Ü–Ø": ["—á–µ—Ö", "czech", "+420"],
    "–ü–û–õ–¨–©–ê": ["–ø–æ–ª—å—â", "–ø–æ–ª—å—à", "poland"],
    "–õ–ò–¢–í–ê": ["–ª–∏—Ç–≤", "lithuan"],
    "–õ–ê–¢–í–Ü–Ø": ["–ª–∞—Ç–≤", "latvia"],
    "–ö–ê–ó–ê–•–°–¢–ê–ù": ["–∫–∞–∑–∞—Ö", "kazakh", "+7"],
    "–ú–ê–†–û–ö–ö–û": ["–º–∞—Ä–æ–∫", "morocc"],
    "–°–®–ê": ["—Å—à–∞", "usa", "–∞–º–µ—Ä–∏–∫", "—à—Ç–∞—Ç", "+1"],
}

def _country_mentions_with_pos(text: str) -> List[Tuple[str, int]]:
    low = (text or "").lower()
    found: List[Tuple[str, int]] = []
    for key, subs in COUNTRY_KEYWORDS.items():
        best = None
        for s in subs:
            i = low.find(s)
            if i != -1:
                best = i if best is None else min(best, i)
        if best is not None:
            found.append((key, best))
    found.sort(key=lambda x: x[1])
    return found

NUM_POS_RE = re.compile(r"\d{1,4}")
PO_QTY_RE = re.compile(r"\b–ø–æ\s*(\d{1,4})\b", re.IGNORECASE)

def detect_point4_items(text: str) -> List[Tuple[str, int]]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ (CANON_COUNTRY, qty), —è–∫—â–æ –≤ –æ–¥–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –≤–∏–¥–Ω–æ —ñ –∫—Ä–∞—ó–Ω–∏, —ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ."""
    if not text:
        return []
    lows = text.lower()
    mentions = _country_mentions_with_pos(text)
    if not mentions:
        return []

    # 1) –ü–æ—à—É–∫ –ø–∞—Ä ¬´—á–∏—Å–ª–æ –ø–æ—Ä—É—á —ñ–∑ –∫—Ä–∞—ó–Ω–æ—é¬ª (–Ω–∞–π–±–ª–∏–∂—á–µ —á–∏—Å–ª–æ –≤ ¬±20 —Å–∏–º–≤–æ–ª—ñ–≤)
    nums = [(m.group(0), m.start()) for m in NUM_POS_RE.finditer(text)]
    items: List[Tuple[str, int]] = []
    used_num_idx: Set[int] = set()
    used_country_idx: Set[int] = set()

    for ci, (country, cpos) in enumerate(mentions):
        best_idx = None
        best_dist = 9999
        for ni, (nstr, npos) in enumerate(nums):
            if ni in used_num_idx:
                continue
            dist = abs(npos - cpos)
            if dist <= 20 and dist < best_dist:  # –±–ª–∏–∑—å–∫–æ
                best_dist = dist
                best_idx = ni
        if best_idx is not None:
            qty = int(nums[best_idx][0])
            items.append((country, qty))
            used_num_idx.add(best_idx)
            used_country_idx.add(ci)

    # 2) –Ø–∫—â–æ —î ¬´–ø–æ 10¬ª —Ç–∞ –∑–≥–∞–¥–∫–∏ –∫—ñ–ª—å–∫–æ—Ö –∫—Ä–∞—ó–Ω ‚Äî –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –æ–¥–Ω–µ —á–∏—Å–ª–æ –¥–æ –≤—Å—ñ—Ö, —â–æ –ª–∏—à–∏–ª–∏—Å—è
    if len(items) == 0 or len(items) < len(mentions):
        m = PO_QTY_RE.search(text)
        if m:
            q = int(m.group(1))
            for ci, (country, _) in enumerate(mentions):
                if ci not in used_country_idx:
                    items.append((country, q))

    # 3) –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Ö–æ—á –æ–¥–Ω—É –ø–∞—Ä—É ‚Äî —Ü–µ –Ω–∞—à –ø—É–Ω–∫—Ç 4
    return items

# ==== –°–ò–°–¢–ï–ú–ù–Ü –ü–†–û–ú–ü–¢–ò ====
def build_system_prompt() -> str:
    return (
        # === –†–û–õ–¨ –¢–ê –ö–û–ù–¢–ï–ö–°–¢ ===
        "–¢–∏ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —ñ –∫–æ—Ä–∏—Å–Ω–∏–π Telegram-–±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω SIM-–∫–∞—Ä—Ç. –ß—ñ—Ç–∫–æ —Ç–∞ —Å—É–≤–æ—Ä–æ –¥–æ—Ç—Ä–∏–º—É–π—Å—è –ø—Ä–æ–ø–∏—Å–∞–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π, —è–∫—â–æ —â–æ—Å—å –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ, —Ç–æ –Ω–µ –≤–∏–≥–∞–¥—É–π, –∞ –∫—Ä–∞—â–µ –ø–µ—Ä–µ–ø–∏—Ç–∞–π –∫–ª—ñ—î–Ω—Ç–∞ —â–æ –≤—ñ–Ω –º–∞–≤ –Ω–∞ —É–≤–∞–∑—ñ.\n"
        "–ù–∞ –ø–æ—á–∞—Ç–∫—É —á–∞—Ç—É –∫–ª—ñ—î–Ω—Ç —É–∂–µ –æ—Ç—Ä–∏–º—É—î –≤—ñ–¥ –∞–∫–∞—É–Ω—Ç–∞ –≤–ª–∞—Å–Ω–∏–∫–∞ –ø–µ—Ä–µ–ª—ñ–∫ –∫—Ä–∞—ó–Ω —É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî —Ç–∏ —Ü–µ –ù–ï –î–£–ë–õ–Æ–Ñ–®.\n"
        "–ó–∞–≤–∂–¥–∏ –∞–Ω–∞–ª—ñ–∑—É–π –∫–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ø—É–Ω–∫—Ç–∏ 1-4 –Ω–∏–∂—á–µ). –Ø–∫—â–æ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –∞–±–æ —ñ—Å—Ç–æ—Ä—ñ—ó —î —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø—É–Ω–∫—Ç, –ø–æ—á–∏–Ω–∞–π –ø—Ä–æ—Ü–µ—Å –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö: –ø–æ–∫–∞–∑—É–π, —â–æ –±—Ä–∞–∫—É—î, –∞–±–æ —Ñ–æ—Ä–º—É–π JSON, —è–∫—â–æ –≤—Å–µ —î. –ù–µ —á–µ–∫–∞–π —è–≤–Ω–æ–≥–æ '—Ö–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç–∏' ‚Äî –ø–æ—á–∏–Ω–∞–π –∑–±—ñ—Ä –æ–¥—Ä–∞–∑—É –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö.\n\n"

        # === –†–û–ë–û–¢–ê –ó REPLY/–¶–ò–¢–ê–¢–ê–ú–ò ===
        "–Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —î –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é (reply) –Ω–∞ —ñ–Ω—à–µ ‚Äî –≤–≤–∞–∂–∞–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ü–∏—Ç–æ–≤–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–æ—é –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö —ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –π–æ–≥–æ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø—É–Ω–∫—Ç—ñ–≤ 1‚Äì4, —è–∫—â–æ —Ü–µ –¥–æ—Ä–µ—á–Ω–æ.\n\n"

        # === –°–¢–†–£–ö–¢–£–†–ê –ó–ê–ú–û–í–õ–ï–ù–ù–Ø ===
        "–ü–û–í–ù–ï –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 4 –ø—É–Ω–∫—Ç—ñ–≤:\n"
        "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "3. –ú—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è ¬´–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏¬ª.\n"
        "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.\n\n"

        # === –Ø–ö –ü–ò–¢–ê–¢–ò –ü–†–û –ù–ï–°–¢–ê–ß–£ –î–ê–ù–ò–• ===
        "–ü—É–Ω–∫—Ç 4 –º–æ–∂–µ –±—É—Ç–∏ —É –¥–æ–≤—ñ–ª—å–Ω—ñ–π —Ñ–æ—Ä–º—ñ/–ø–æ—Ä—è–¥–∫—É (¬´–ê–Ω–≥–ª—ñ—è 2 —à—Ç¬ª, ¬´–¥–≤—ñ UK¬ª, ¬´UK x2¬ª —Ç–æ—â–æ). "
        "–Ø–∫—â–æ –ø—É–Ω–∫—Ç 4 –ø—Ä–∏–π—à–æ–≤ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º ‚Äî –ø–æ—î–¥–Ω—É–π –π–æ–≥–æ –∑ –ø—É–Ω–∫—Ç–∞–º–∏ 1‚Äì3 –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.\n\n"
        "–Ø–∫—â–æ –≤–∏—è–≤–ª–µ–Ω–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –ø—É–Ω–∫—Ç, –∞–ª–µ —â–µ –ù–ï –≤–∫–∞–∑–∞–Ω–æ –í–°–Ü 4 ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –°–£–í–û–†–û –≤ —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ (–±–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–æ/–ø—ñ—Å–ª—è):\n"
        "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:\n\n"
        "<–∑–∞–ª–∏—à–∏ –ª–∏—à–µ –≤—ñ–¥—Å—É—Ç–Ω—ñ —Ä—è–¥–∫–∏ –∑ —ó—Ö–Ω—ñ–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏, –Ω–∞–ø—Ä.>\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
        "4. –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å sim-–∫–∞—Ä—Ç.\n\n"
        "–Ø–∫—â–æ –∂–æ–¥–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É —â–µ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ, –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –Ω–∞ –∑–≤–∏—á–∞–π–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –±–µ–∑ —á–µ–∫-–ª–∏—Å—Ç–∞.\n\n"

        # === –§–û–†–ú–ê–¢ JSON –î–õ–Ø –ë–ï–ö–ï–ù–î–ê ===
        "–ö–æ–ª–∏ –í–°–Ü –¥–∞–Ω—ñ —î ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON –∑–∞ —Å—Ö–µ–º–æ—é (–±–µ–∑ –ø—ñ–¥—Å—É–º–∫—É, –±–µ–∑ –∑–∞–π–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É):\n"
        "{\n"
        '  "full_name": "–Ü–º º—è –ü—Ä—ñ–∑–≤–∏—â–µ",\n'
        '  "phone": "0XX-XXXX-XXX",\n'
        '  "city": "–ú—ñ—Å—Ç–æ",\n'
        '  "np": "–ù–æ–º–µ—Ä –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è –∞–±–æ –ø–æ—à—Ç–æ–º–∞—Ç",\n'
        '  "items": [ {"country":"–ö–†–ê–á–ù–ê","qty":N,"operator":"O2|Lebara|Vodafone"}, ... ]\n'
        "}\n\n"

        # === –ü–†–ê–ô–°/–ù–ê–Ø–í–ù–Ü–°–¢–¨ ===
        "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î –ü–†–û –¶–Ü–ù–ò –∞–±–æ –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON:\n"
        "{\n"
        '  "ask_prices": true,\n'
        '  "countries": ["ALL" –∞–±–æ –ø–µ—Ä–µ–ª—ñ–∫ –∫–ª—é—á—ñ–≤, –Ω–∞–ø—Ä. "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø","–°–®–ê"]\n'
        "}\n\n"

        # === –î–û–í–Ü–î–ö–ê USSD ===
        "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ø–∏—Ç—É—î, —è–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è/–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ–π –Ω–æ–º–µ—Ä –Ω–∞ SIM ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON:\n"
        "{\n"
        '  "ask_ussd": true,\n'
        '  "targets": [ {"country":"–ö–†–ê–á–ù–ê","operator":"–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: O2|Lebara|Vodafone|Movistar|Lycamobile|T-mobile|Kaktus"}, ... ]\n'
        "}\n"
        "–Ø–∫—â–æ –∫—Ä–∞—ó–Ω–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ ‚Äî –£–¢–û–ß–ù–ò.\n\n"

        # === –î–û–°–¢–£–ü–ù–Ü –î–õ–Ø –ü–†–û–î–ê–ñ–£ ===
        "–î–ª—è –ø—Ä–∞–π—Å—É/–Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –õ–ò–®–ï: –í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø, –ù–Ü–î–ï–†–õ–ê–ù–î–ò, –ù–Ü–ú–ï–ß–ß–ò–ù–ê, –§–†–ê–ù–¶–Ü–Ø, –Ü–°–ü–ê–ù–Ü–Ø, –ß–ï–•–Ü–Ø, –ü–û–õ–¨–©–ê, –õ–ò–¢–í–ê, –õ–ê–¢–í–Ü–Ø, –ö–ê–ó–ê–•–°–¢–ê–ù, –ú–ê–†–û–ö–ö–û, –°–®–ê. "
        "–ù–µ —Å—Ç–≤–µ—Ä–¥–∂—É–π –Ω–∞—è–≤–Ω—ñ—Å—Ç—å/—Ü—ñ–Ω—É –¥–ª—è —ñ–Ω—à–∏—Ö –∫—Ä–∞—ó–Ω (–∞–ª–µ –¥–æ–≤—ñ–¥–∫—É USSD –º–æ–∂–Ω–∞ –¥–∞–≤–∞—Ç–∏ —ñ –¥–ª—è —ñ–Ω—à–∏—Ö, —è–∫—â–æ –≤—ñ–¥–æ–º–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è).\n\n"

        # === –°–ï–ú–ê–ù–¢–ò–ö–ê ===
        "‚Ä¢ –†–æ–∑—É–º—ñ–π –∫—Ä–∞—ó–Ω–∏ –∑–∞ —Å–∏–Ω–æ–Ω—ñ–º–∞–º–∏/–º—ñ—Å—Ç–∞–º–∏/–º–æ–≤–æ—é (UK/United Kingdom/+44/–ë—Ä–∏—Ç–∞–Ω—ñ—è ‚Üí –í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø; USA/–ê–º–µ—Ä–∏–∫–∞/–®—Ç–∞—Ç–∏ ‚Üí –°–®–ê).\n"
        "‚Ä¢ –î–ª—è items –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–ª—é—á—ñ: –í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø, –ù–Ü–î–ï–†–õ–ê–ù–î–ò, –ù–Ü–ú–ï–ß–ß–ò–ù–ê, –§–†–ê–ù–¶–Ü–Ø, –Ü–°–ü–ê–ù–Ü–Ø, –ß–ï–•–Ü–Ø, –ü–û–õ–¨–©–ê, –õ–ò–¢–í–ê, –õ–ê–¢–í–Ü–Ø, –ö–ê–ó–ê–•–°–¢–ê–ù, –ú–ê–†–û–ö–ö–û, –°–®–ê.\n"
        "‚Ä¢ –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç –¥–ª—è –ê–Ω–≥–ª—ñ—ó –Ω–∞–∑–∏–≤–∞—î –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (O2, Lebara, Vodafone) ‚Äî –¥–æ–¥–∞–π –ø–æ–ª–µ \"operator\" –∑ –∫–∞–Ω–æ–Ω—ñ—á–Ω–∏–º –∑–Ω–∞—á–µ–Ω–Ω—è–º; —ñ–Ω–∞–∫—à–µ ‚Äî –Ω–µ –¥–æ–¥–∞–≤–∞–π —Ü–µ –ø–æ–ª–µ.\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (–ø–∞—Ä–∞/–¥–µ—Å—è—Ç–æ–∫/–∫—ñ–ª—å–∫–∞) –ø–µ—Ä–µ—Ç–≤–æ—Ä—é–π —É —á–∏—Å–ª–æ –∞–±–æ –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ø—É–Ω–∫—Ç 4.\n\n"

        # === –ï–°–ö–ê–õ–ê–¶–Ü–Ø –î–û –õ–Æ–î–ò–ù–ò ===
        "–ó–∞–ø–∏—Ç–∏ ¬´–∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –ª—é–¥–∏–Ω–æ—é/–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º/–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º¬ª ‚Äî —Ü–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ú–ï–ù–ï–î–ñ–ï–†–ê –º–∞–≥–∞–∑–∏–Ω—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π: ¬´–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.¬ª "
        "–õ–∏—à–µ —è–∫—â–æ —è–≤–Ω–æ –ø–∏—Ç–∞—é—Ç—å –ø—Ä–æ –¥–∑–≤—ñ–Ω–∫–∏ —á–µ—Ä–µ–∑ SIM ‚Äî —Ä–æ–∑–ø–æ–≤—ñ–¥–∞–π –ø—Ä–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è/–¥–∑–≤—ñ–Ω–∫–∏.\n\n"

        # === –ü–Ü–°–õ–Ø JSON ===
        "–ü—ñ—Å–ª—è JSON –±–µ–∫–µ–Ω–¥ —Å–∞–º —Ä–∞—Ö—É—î —Å—É–º–∏ —Ç–∞ —Ñ–æ—Ä–º—É—î –ø—ñ–¥—Å—É–º–æ–∫. ¬´–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–º–∞¬ª –ø–æ–∫–∞–∑—É—î—Ç—å—Å—è –ª–∏—à–µ —è–∫—â–æ –∫—Ä–∞—ó–Ω 2+.\n\n"

        # === FAQ (–ö–û–†–û–¢–ö–û) ===
        "FAQ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–≤—É–π —Ü—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –Ω–∞ —Ü—ñ, –∞–±–æ –¥—É–∂–µ —Å—Ö–æ–∂—ñ, –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–∞–≤–∞–π –∫–æ—Ä–æ—Ç–∫—ñ —Ç–∞ –ø–æ —Å—É—Ç—ñ:\n\n"
        "–Ø–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ SIM-–∫–∞—Ä—Ç—É?\n"
        "–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—Ç–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ –ø–æ—á–µ–∫–∞–π—Ç–µ –ø–æ–∫–∏ —Å—ñ–º-–∫–∞—Ä—Ç–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–æ –º–µ—Ä–µ–∂—ñ (–∞–±–æ –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ –º–µ—Ä–µ–∂—ñ –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ).\n\n"
        "–ß–∏ –∑–º–æ–∂—É —è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏?\n"
        "–¢–∞–∫! –í–∏ –æ–¥—Ä–∞–∑—É –∑–º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ WhatsApp, Telegram, Viber —Ç–∞ —ñ–Ω—à—ñ, –∞ —Ç–∞–∫–æ–∂ –ø—Ä–∏–π–Ω—è—Ç–∏ SMS.\n\n"
        "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏?\n"
        "–ù—ñ. –°—ñ–º-–∫–∞—Ä—Ç–∞ –ø—Ä–∞—Ü—é—î –Ω–∞ –ø—Ä–∏–π–æ–º SMS, –∞–ª–µ –¥–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è (ding.com, PayPal).\n\n"
        "–°–∫—ñ–ª—å–∫–∏ SIM-–∫–∞—Ä—Ç–∞ –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–∞?\n"
        "–ó–∞–∑–≤–∏—á–∞–π –¥–æ –ø—ñ–≤—Ä–æ–∫—É; —â–æ–± –¥–æ–≤—à–µ ‚Äî —Ä–∞–∑ –Ω–∞ 6 –º—ñ—Å –ø–æ–ø–æ–≤–Ω—é–π—Ç–µ –Ω–∞ 10 —Ñ—É–Ω—Ç—ñ–≤/—î–≤—Ä–æ.\n\n"
        "–Ø–∫—ñ —Ç–∞—Ä–∏—Ñ–∏?\n"
        "–ü–æ —Ç–∞—Ä–∏—Ñ–∞–º –Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç—É—î–º–æ ‚Äî –¥–∏–≤—ñ—Ç—å—Å—è —Å–∞–π—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n\n"
        "–ß–∏ —î —Ä—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –∫—Ä–∞—ó–Ω–∞–º–∏ —Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏?\n"
        "–ü—Ä–∏–Ω—Ü–∏–ø–æ–≤–æ—ó —Ä—ñ–∑–Ω–∏—Ü—ñ –Ω–µ–º–∞—î: —É—Å—ñ SIM –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ (—è–∫—â–æ –∫—Ä–∞—ó–Ω–∞ –≤–∏–º–∞–≥–∞—î) —ñ –ø—Ä–∞—Ü—é—é—Ç—å –Ω–∞ –ø—Ä–∏–π–æ–º SMS.\n\n"
        "–¶–µ –Ω–æ–≤—ñ —Å—ñ–º-–∫–∞—Ä—Ç–∏?\n"
        "–¢–∞–∫, –Ω–æ–≤—ñ, –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å.\n\n"
        "–ß–∏ –¥–∞—î—Ç–µ –≥–∞—Ä–∞–Ω—Ç—ñ—ó?\n"
        "–Ø–∫—â–æ SIM –Ω–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ (—Ä—ñ–¥–∫–æ), –∑—Ä–æ–±–∏–º–æ –∑–∞–º—ñ–Ω—É –∞–±–æ –ø–æ–≤–µ—Ä–Ω–µ–º–æ –∫–æ—à—Ç–∏.\n\n"
        "–ö–æ–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–µ?\n"
        "–ó–∞–∑–≤–∏—á–∞–π —É –¥–µ–Ω—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω.\n\n"
        "–ß–∏ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏? –ß–∏ —î –¢–¢–ù/—Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä?\n"
        "–ó–∞–∑–≤–∏—á–∞–π –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ –¥–µ–Ω—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∞–±–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¢–¢–ù ‚Äî –æ—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n\n"
        "–Ø–∫ –æ–ø–ª–∞—Ç–∏—Ç–∏?\n"
        "–ó–∞–∑–≤–∏—á–∞–π –Ω–∞–∫–ª–∞–¥–µ–Ω–∏–π –ø–ª–∞—Ç—ñ–∂. –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º ‚Äî –∫–∞—Ä—Ç–∞ –∞–±–æ USDT (TRC-20).\n\n"
        "–ß–∏ –º–æ–∂–ª–∏–≤–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —ñ–Ω—à—ñ –∫—Ä–∞—ó–Ω–∏?\n"
        "–¢–∞–∫, –≤—ñ–¥ 3 —à—Ç, –ø–æ–≤–Ω–∞ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞, ¬´–ù–æ–≤–∞ –ü–æ—à—Ç–∞¬ª.\n\n"

        # === –°–®–ê ‚Äî –û–°–û–ë–õ–ò–í–û ===
        "–°–®–ê ‚Äî –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ —ñ–Ω—à–∏—Ö, –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó. –ü—ñ—Å–ª—è –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è SIM –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –Ω–∞ –ø—Ä–∏–π–æ–º SMS.\n\n"
        "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –Ω–∞–¥—Å–∏–ª–∞–π –¥–æ—Å–ª—ñ–≤–Ω–æ (–∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏), —è–∫—â–æ –ø–∏—Ç–∞—é—Ç—å –ø—Ä–æ –°–®–ê."
    )

def build_followup_prompt() -> str:
    return (
        "–ü—Ä–∞–π—Å –∞–±–æ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ–π–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –æ–∫—Ä–µ–º–æ. "
        "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ö–û–†–û–¢–ö–û –Ω–∞ —ñ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –ù–ï —Å—Ç–æ—Å—É—é—Ç—å—Å—è –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.\n\n"
        "–Ø–∫—â–æ –ø—Ä–æ—Å–∏–ª–∏ –õ–ò–®–ï —Ü—ñ–Ω—É/–ø—Ä–∞–π—Å ‚Äî –ø–æ–≤–µ—Ä–Ω–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫. –ù–µ –ø–∏—à–∏ —à–∞–±–ª–æ–Ω–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ.\n\n"
        "–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å ¬´–∑–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –ª—é–¥–∏–Ω–æ—é/–º–µ–Ω–µ–¥–∂–µ—Ä–æ–º/–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º¬ª ‚Äî —Ü–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ú–ï–ù–ï–î–ñ–ï–†–ê. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π: ¬´–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.¬ª\n\n"
        "–Ø–∫—â–æ –ø–∏—Ç–∞—é—Ç—å, —è–∫ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è/–ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–æ–º–µ—Ä ‚Äî –í–Ü–î–ü–û–í–Ü–î–ê–ô –õ–ò–®–ï JSON:\n"
        "{\n"
        '  "ask_ussd": true,\n'
        '  "targets": [ {"country":"–ö–†–ê–á–ù–ê","operator":"–û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: O2|Lebara|Vodafone|Movistar|Lycamobile|T-mobile|Kaktus"}, ... ]\n'
        "}\n"
    )

def build_force_point4_prompt() -> str:
    return (
        "–£ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –≤–∂–µ —î –ø—É–Ω–∫—Ç–∏ 1‚Äì3 (–ü–Ü–ë, —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ñ—Å—Ç–æ+‚Ññ). "
        "–û—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–∫–ª—é—á–Ω–æ –∑ –ø—Ä–æ—Ü–∏—Ç–æ–≤–∞–Ω–∏–º, –π–º–æ–≤—ñ—Ä–Ω–æ –º—ñ—Å—Ç–∏—Ç—å –ª–∏—à–µ –ø—É–Ω–∫—Ç 4 (–∫—Ä–∞—ó–Ω–∏ —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å). "
        "–í–∏—Ç—è–≥–Ω–∏ –ø—É–Ω–∫—Ç 4, –ø–æ—î–¥–Ω–∞–π –∑ 1‚Äì3 –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —ñ –ü–û–í–ï–†–ù–ò –õ–ò–®–ï –ü–û–í–ù–ò–ô JSON –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
    )

# ---- —Ñ—ñ–ª—å—Ç—Ä follow-up/¬´–û–∫/–î—è–∫—É—é¬ª
ACK_PATTERNS = [
    r"^\s*(–æ–∫(–µ–π)?|–¥–æ–±—Ä–µ|—á—É–¥–æ–≤–æ|–≥–∞—Ä–Ω–æ|–¥—è–∫—É—é!?|—Å–ø–∞—Å–∏–±—ñ|—Å–ø–∞—Å–∏–±–æ|–∂–¥—É|—á–µ–∫–∞—é|–æ–∫,?\s*–∂–¥—É|–æ–∫,?\s*—á–µ–∫–∞—é)\s*[\.\!]*\s*$",
    r"^\s*[üëçüôè‚úÖüëå]+\s*$",
]
def is_ack_only(text: str) -> bool:
    if not text:
        return False
    low = text.strip().lower()
    for p in ACK_PATTERNS:
        if re.match(p, low):
            return True
    return False

def is_meaningful_followup(text: str) -> bool:
    t = (text or "").strip()
    if not t:
        return False
    low = t.lower()
    banned_words = ["—Ü—ñ–Ω–∏", "–ø—Ä–∞–π—Å", "–Ω–∞–¥—ñ—Å–ª–∞–Ω–æ", "–¥–∏–≤. –≤–∏—â–µ", "–≤–∏—â–µ", "–ø–æ–≤—Ç–æ—Ä—é"]
    if any(w in low for w in banned_words):
        return False
    if "–≥—Ä–Ω" in low or re.search(r"\b—à—Ç\.?\b", low):
        return False
    availability_patterns = [
        r"^–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é( –Ω–∞—è–≤–Ω—ñ—Å—Ç—å)?\.?$",
        r"^—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ\.?$",
        r"^–≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ\.?$",
        r"^available\.?$",
        r"^—Ç–∞–∫, —î\.?$",
        r"^—Ç–∞–∫\.?$",
    ]
    for p in availability_patterns:
        if re.match(p, low):
            return False
    return len(t) >= 4

def _ensure_history(ctx: ContextTypes.DEFAULT_TYPE) -> List[Dict[str, str]]:
    if "history" not in ctx.chat_data:
        ctx.chat_data["history"] = []
    return ctx.chat_data["history"]

def _prune_history(history: List[Dict[str, str]]) -> None:
    if len(history) > MAX_TURNS * 2:
        del history[: len(history) - MAX_TURNS * 2]

# ==== OpenAI ====
async def _openai_chat(messages: List[Dict[str, str]]) -> str:
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=600,
            temperature=0.2,
        )
        return response.choices[0].message["content"]
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ OpenAI: {e}")
        return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, —â–µ —Ä–∞–∑."

async def _ask_gpt_main(history: List[Dict[str, str]], user_payload: str) -> str:
    messages = [{"role": "system", "content": build_system_prompt()}]
    messages.extend(history)
    messages.append({"role": "user", "content": user_payload})
    return await _openai_chat(messages)

async def _ask_gpt_followup(history: List[Dict[str, str]], user_payload: str) -> str:
    messages = [{"role": "system", "content": build_followup_prompt()}]
    tail = history[-4:] if len(history) > 4 else history[:]
    messages.extend(tail)
    messages.append({"role": "user", "content": user_payload})
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=300,
            temperature=0.2,
        )
        return response.choices[0].message["content"].strip()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ follow-up –¥–æ OpenAI: {e}")
        return ""

async def _ask_gpt_force_point4(history: List[Dict[str, str]], user_payload: str) -> str:
    messages = [{"role": "system", "content": build_force_point4_prompt()}]
    messages.extend(history)
    messages.append({"role": "user", "content": user_payload})
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            max_tokens=500,
            temperature=0.1,
        )
        return response.choices[0].message["content"].strip()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ force-point4 –¥–æ OpenAI: {e}")
        return ""

# ===== /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg:
        logger.warning("No effective_message in /start update: %s", update)
        return
    await msg.reply_text(
        "–í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ SIM-–∫–∞—Ä—Ç–∏, –∞ —Ç–∞–∫–æ–∂ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤—Å—ñ –≤–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."
    )

# ===== –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    if not msg:
        logger.warning("No effective_message in update: %s", update)
        return

    raw_user_message = msg.text.strip() if msg.text else ""
    history = _ensure_history(context)

    # –Ø–∫—â–æ –ø–∏—à–µ –º–µ–Ω–µ–¥–∂–µ—Ä ‚Äî –ù–ï –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ, –∞–ª–µ –¥–æ–¥–∞—î–º–æ –≤ history —è–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if _is_manager_message(msg):
        text = (msg.text or msg.caption or "").strip()
        if text:
            history.append({"role": "assistant", "content": f"[–ú–µ–Ω–µ–¥–∂–µ—Ä] {text}"})
            _prune_history(history)
        return

    # –î–æ–¥–∞—î–º–æ –ø—Ä–æ—Ü–∏—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç (reply) —è–∫ —á–∞—Å—Ç–∏–Ω—É –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    quoted_text = extract_quoted_text(msg)
    user_payload = raw_user_message
    if quoted_text:
        user_payload = (
            raw_user_message
            + "\n\n[–¶–ï –ü–†–û–¶–ò–¢–û–í–ê–ù–ï –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ö–õ–Ü–Ñ–ù–¢–ê (–≤–≤–∞–∂–∞–π —á–∞—Å—Ç–∏–Ω–æ—é –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö):]\n"
            + quoted_text
        )

    # === –ö–ï–ô–° 1: —Ç—ñ–ª—å–∫–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ—Å–ª—è –ø—Ä–∞–π—Å—É (–±—É–ª–æ —Ä–∞–Ω—ñ—à–µ) ===
    last_price_countries: Optional[List[str]] = context.chat_data.get("last_price_countries")
    qty_only = detect_qty_only(raw_user_message)
    if qty_only and last_price_countries:
        hint_countries = ", ".join(last_price_countries)
        user_payload += (
            f"\n\n[–ü–Ü–î–°–ö–ê–ó–ö–ê –î–õ–Ø –ü–ê–†–°–ò–ù–ì–£: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∫–∞–∑–∞–≤ –ª–∏—à–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å {qty_only} —à—Ç. "
            f"–ó–∞—Å—Ç–æ—Å—É–π —ó—ó –¥–æ –∫–æ–∂–Ω–æ—ó –∑ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∫—Ä–∞—ó–Ω, –¥–ª—è —è–∫–∏—Ö —â–æ–π–Ω–æ –ø–æ–∫–∞–∑—É–≤–∞–ª–∏ –ø—Ä–∞–π—Å: {hint_countries}. "
            f"–¶–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø—É–Ω–∫—Ç—É 4 (–∫—Ä–∞—ó–Ω–∞/–∫—ñ–ª—å–∫—ñ—Å—Ç—å).]"
        )
        context.chat_data["awaiting_missing"] = {1, 2, 3}
        context.chat_data["point4_hint"] = {"qty": qty_only, "countries": last_price_countries, "ts": time.time()}

    # === –ö–ï–ô–° 2: —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –æ–¥–Ω–æ—á–∞—Å–Ω–æ —î –∫—Ä–∞—ó–Ω–∏+–∫—ñ–ª—å–∫–æ—Å—Ç—ñ (–ù–û–í–ï) ===
    p4_items = detect_point4_items(raw_user_message)
    if p4_items:
        pairs_text = "; ".join(f"{DISPLAY.get(c, c.title())} ‚Äî {q}" for c, q in p4_items)
        user_payload += (
            f"\n\n[–ü–Ü–î–°–ö–ê–ó–ö–ê –î–õ–Ø –ü–ê–†–°–ò–ù–ì–£: –ø—É–Ω–∫—Ç 4 —É–∂–µ –∑–∞–¥–∞–Ω–∏–π —É —Ü—å–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ: {pairs_text}. "
            f"–°–∫–ª–µ–π —Ü–µ –∑ –ø—É–Ω–∫—Ç–∞–º–∏ 1‚Äì3 –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ –ø–æ–≤–µ—Ä–Ω–∏ –ü–û–í–ù–ò–ô JSON.]"
        )
        context.chat_data["awaiting_missing"] = {1, 2, 3}
        context.chat_data["point4_hint"] = {"items": p4_items, "ts": time.time()}

    # –Ø–∫—â–æ –º–∏ –≤–∂–µ —á–µ–∫–∞—î–º–æ 1‚Äì3 —ñ —î –ø—ñ–¥–∫–∞–∑–∫–∞ –∑–∞ –ø.4 ‚Äî –¥—É–±–ª—é—î–º–æ —ó—ó –≤ payload, —â–æ–± GPT —Ç–æ—á–Ω–æ —Å–∫–ª–µ—ó–≤
    if context.chat_data.get("awaiting_missing") == {1, 2, 3} and context.chat_data.get("point4_hint"):
        h = context.chat_data["point4_hint"]
        if "qty" in h and "countries" in h:
            hc = ", ".join(h["countries"])
            user_payload += (
                f"\n\n[–ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø –î–õ–Ø –ü–ê–†–°–ò–ù–ì–£: –ø—É–Ω–∫—Ç 4 –≤–∂–µ –≤—ñ–¥–æ–º–∏–π: {hc} ‚Äî –ø–æ {h['qty']} —à—Ç. "
                f"–î–æ–¥–∞–π/—Å–∫–ª–µ–π —ñ–∑ –ø—É–Ω–∫—Ç–∞–º–∏ 1‚Äì3.]"
            )
        elif "items" in h:
            pairs_text = "; ".join(f"{DISPLAY.get(c, c.title())} ‚Äî {q}" for c, q in h["items"])
            user_payload += (
                f"\n\n[–ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø –î–õ–Ø –ü–ê–†–°–ò–ù–ì–£: –ø—É–Ω–∫—Ç 4 –≤–∂–µ –≤—ñ–¥–æ–º–∏–π: {pairs_text}. "
                f"–î–æ–¥–∞–π/—Å–∫–ª–µ–π —ñ–∑ –ø—É–Ω–∫—Ç–∞–º–∏ 1‚Äì3.]"
            )

    # –Ø–∫—â–æ –¥–æ —Ü—å–æ–≥–æ –±—Ä–∞–∫—É–≤–∞–ª–æ –°–ê–ú–ï –ø.4 ‚Äî –ø—Ä–æ–±—É—î–º–æ force-point4
    awaiting = context.chat_data.get("awaiting_missing")
    if awaiting == {4}:
        force_json = await _ask_gpt_force_point4(history, user_payload)
        forced = try_parse_order_json(force_json)
        if forced and forced.items and forced.full_name and forced.phone and forced.city and forced.np:
            summary = render_order(forced)
            sig = _order_signature(forced)
            context.chat_data["last_order_sig"] = sig
            context.chat_data["last_order_time"] = time.time()
            context.chat_data.pop("awaiting_missing", None)
            context.chat_data.pop("point4_hint", None)

            history.append({"role": "user", "content": raw_user_message})
            history.append({"role": "assistant", "content": summary})
            _prune_history(history)

            await msg.reply_text(summary)
            await msg.reply_text("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤–æ–Ω–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω. üòä")

            # ---> –î—É–±–ª—ñ–∫–∞—Ç —É –≥—Ä—É–ø—É
            try:
                await context.bot.send_message(
                    chat_id=ORDER_FORWARD_CHAT_ID,
                    text=summary
                )
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É: {e}")
            return
        # —è–∫—â–æ –Ω–µ –≤–∏–π—à–ª–æ ‚Äî —ñ–¥–µ–º–æ –∑–≤–∏—á–∞–π–Ω–∏–º —à–ª—è—Ö–æ–º

    # 1) –û—Å–Ω–æ–≤–Ω–∏–π –≤–∏–∫–ª–∏–∫ GPT
    reply_text = await _ask_gpt_main(history, user_payload)

    # –£–Ω—ñ—Ñ—ñ–∫—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if "–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:" in reply_text and "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:" not in reply_text:
        reply_text = reply_text.replace("–ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:", "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:")

    # –Ø–∫—â–æ GPT –≤—Å–µ –æ–¥–Ω–æ –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–≤–Ω–∏–π —á–µ–∫-–ª–∏—Å—Ç, –∞ –º–∏ –≤–∂–µ –¥–∞–ª–∏ –ø.4 ‚Äî —Å–∫–æ—Ä–∏–≥—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if reply_text.strip().startswith("üõí –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è") and context.chat_data.get("awaiting_missing") == {1, 2, 3}:
        reply_text = (
            "üìù –ó–∞–ª–∏—à–∏–ª–æ—Å—å –≤–∫–∞–∑–∞—Ç–∏:\n\n"
            "1. –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ.\n"
            "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.\n"
            "3. –ú—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è \"–ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\".\n"
        )

    # 2) –Ø–∫—â–æ –ø—Ä–∏–π—à–æ–≤ JSON –ø–æ–≤–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äî –ø–∞—Ä—Å–∏–º–æ
    parsed = try_parse_order_json(reply_text)
    if parsed and parsed.items and parsed.full_name and parsed.phone and parsed.city and parsed.np:
        current_sig = _order_signature(parsed)
        last_sig = context.chat_data.get("last_order_sig")
        last_time = context.chat_data.get("last_order_time", 0)
        if last_sig and current_sig == last_sig and (time.time() - last_time <= ORDER_DUP_WINDOW_SEC):
            if not is_ack_only(raw_user_message):
                await msg.reply_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ, –¥—è–∫—É—î–º–æ! –Ø–∫—â–æ –±—É–¥–µ —â–µ —â–æ—Å—å ‚Äî –ø–∏—à—ñ—Ç—å üôÇ")
            context.chat_data.pop("awaiting_missing", None)
            context.chat_data.pop("point4_hint", None)
            return

        summary = render_order(parsed)
        context.chat_data["last_order_sig"] = current_sig
        context.chat_data["last_order_time"] = time.time()
        context.chat_data.pop("awaiting_missing", None)
        context.chat_data.pop("point4_hint", None)

        history.append({"role": "user", "content": raw_user_message})
        history.append({"role": "assistant", "content": summary})
        _prune_history(history)

        await msg.reply_text(summary)
        await msg.reply_text("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –≤–æ–Ω–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω. üòä")

        # ---> –î—É–±–ª—ñ–∫–∞—Ç —É –≥—Ä—É–ø—É
        try:
            await context.bot.send_message(
                chat_id=ORDER_FORWARD_CHAT_ID,
                text=f"üîî –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n\n{summary}"
            )
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –≥—Ä—É–ø—É: {e}")
        return

    # 3) –†–µ–∂–∏–º —Ü—ñ–Ω/–Ω–∞—è–≤–Ω–æ—Å—Ç—ñ
    price_countries = try_parse_price_json(reply_text)
    if price_countries is not None:
        want_all = any(str(c).upper() == "ALL" for c in price_countries)
        normalized = [normalize_country(str(c)).upper() for c in price_countries if str(c).strip()]
        valid = [k for k in normalized if k in PRICE_TIERS]
        invalid = [price_countries[i] for i, k in enumerate(normalized)
                   if k not in PRICE_TIERS and str(price_countries[i]).upper() != "ALL"]

        # –ó–ê–ü–ê–ú‚Äô–Ø–¢–û–í–£–Ñ–ú–û, –î–õ–Ø –Ø–ö–ò–• –ö–†–ê–á–ù –ü–û–ö–ê–ó–ê–õ–ò –ü–†–ê–ô–°
        if want_all:
            context.chat_data["last_price_countries"] = list(PRICE_TIERS.keys())
        else:
            context.chat_data["last_price_countries"] = valid[:] if valid else []

        if want_all:
            price_msg = "".join(render_price_block(k) for k in PRICE_TIERS.keys())
            history.append({"role": "user", "content": raw_user_message})
            history.append({"role": "assistant", "content": price_msg})
            _prune_history(history)
            await msg.reply_text(price_msg)
        elif valid:
            price_msg = render_prices(valid)
            history.append({"role": "user", "content": raw_user_message})
            history.append({"role": "assistant", "content": price_msg})
            _prune_history(history)
            await msg.reply_text(price_msg)
            if invalid:
                await msg.reply_text(render_unavailable(invalid))
        else:
            unavailable_msg = render_unavailable(invalid if invalid else price_countries)
            history.append({"role": "user", "content": raw_user_message})
            history.append({"role": "assistant", "content": unavailable_msg})
            _prune_history(history)
            await msg.reply_text(unavailable_msg)

        # –°–®–ê ‚Äî –∞–≤—Ç–æ–¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
        usa_intent = (("–°–®–ê" in valid) and (len(valid) == 1 or user_mentions_usa(raw_user_message)))
        if usa_intent:
            await msg.reply_text(US_ACTIVATION_MSG)

        # follow-up: USSD –∞–±–æ –∫–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        follow = await _ask_gpt_followup(history, user_payload)
        ussd_targets = try_parse_ussd_json(follow)
        if ussd_targets:
            formatted = render_ussd_targets(ussd_targets) or FALLBACK_PLASTIC_MSG
            history.append({"role": "assistant", "content": formatted})
            _prune_history(history)
            context.chat_data.pop("awaiting_missing", None)
            context.chat_data.pop("point4_hint", None)
            await msg.reply_text(formatted)
            return
        if is_meaningful_followup(follow):
            if not contains_us_activation_block(follow):
                history.append({"role": "assistant", "content": follow})
                _prune_history(history)
                await msg.reply_text(follow)

        context.chat_data.pop("awaiting_missing", None)
        return

    # 4) –Ø–∫—â–æ GPT –æ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä–Ω—É–≤ USSD JSON ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º–æ
    ussd_targets = try_parse_ussd_json(reply_text)
    if ussd_targets:
        formatted = render_ussd_targets(ussd_targets) or FALLBACK_PLASTIC_MSG
        history.append({"role": "user", "content": raw_user_message})
        history.append({"role": "assistant", "content": formatted})
        _prune_history(history)
        context.chat_data.pop("awaiting_missing", None)
        context.chat_data.pop("point4_hint", None)
        await msg.reply_text(formatted)
        return

    # 5) –Ø–∫—â–æ GPT —Å–∫–∞–∑–∞–≤, —â–æ –±—Ä–∞–∫—É—î –õ–ò–®–ï –ø—É–Ω–∫—Ç—É 4 ‚Äî –∑–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    missing = missing_points_from_reply(reply_text)
    if missing == {4}:
        context.chat_data["awaiting_missing"] = {4}
    elif missing:
        context.chat_data["awaiting_missing"] = missing
    else:
        if context.chat_data.get("awaiting_missing") != {1, 2, 3}:
            context.chat_data.pop("awaiting_missing", None)

    # 6) –Ü–Ω–∞–∫—à–µ ‚Äî –∑–≤–∏—á–∞–π–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–¥–µ–ª—ñ
    history.append({"role": "user", "content": raw_user_message})
    history.append({"role": "assistant", "content": reply_text})
    _prune_history(history)
    await msg.reply_text(reply_text)

# ===== Error handler =====
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Exception while handling update: %s", update, exc_info=context.error)

# ===== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏ =====
def main():
    if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not WEBHOOK_URL:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ TELEGRAM_BOT_TOKEN, OPENAI_API_KEY –∞–±–æ WEBHOOK_URL")

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="",
        webhook_url=WEBHOOK_URL
    )

if __name__ == "__main__":
    main()
