# telegram_sim_bot.py
# -*- coding: utf-8 -*-
"""
AI‚Äë–±–æ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂—É SIM‚Äë–∫–∞—Ä—Ç —É Telegram –∑ –ª–æ–≥—ñ–∫–æ—é –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å,
–∞–≤—Ç–æ–≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é –ø—Ä–∞–π—Å—É, –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –Ω–∞ FAQ —Ç–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—î—é –∑ OpenAI
–¥–ª—è –≤—ñ–ª—å–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É (fallback).

–°—É–º—ñ—Å–Ω–∏–π —ñ–∑ python-telegram-bot v20+ —Ç–∞ openai==0.28.0 (–∫–ª–∞—Å–∏—á–Ω–∏–π ChatCompletion).
–ü—ñ–¥ –≤–µ–±—Ö—É–∫ (Render —Ç–∞ —ñ–Ω.).
"""

import os
import re
import json
import logging
from typing import Dict, Any, List, Optional, Tuple

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

import openai  # openai==0.28.0

# ===== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ =====
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger("sim-bot")

# ===== –ö–ª—é—á—ñ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è =====
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ü–æ–≤–Ω–∞ HTTPS URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞
PORT = int(os.getenv("PORT", "8443"))

openai.api_key = OPENAI_API_KEY

# ===== –î–∞–Ω—ñ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏ =====
COUNTRIES = {
    "gb": {"flag": "üá¨üáß", "name": "–í–ï–õ–ò–ö–û–ë–†–ò–¢–ê–ù–Ü–Ø", "aliases": ["–∞–Ω–≥–ª—ñ—è", "–≤–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω—ñ—è", "–±—Ä–∏—Ç–∞–Ω–∏—è", "–∞–Ω–≥–ª–∏—è", "uk", "great britain", "britain"]},
    "nl": {"flag": "üá≥üá±", "name": "–ù–Ü–î–ï–†–õ–ê–ù–î–ò", "aliases": ["–Ω—ñ–¥–µ—Ä–ª–∞–Ω–¥–∏", "–≥–æ–ª–ª–∞–Ω–¥—ñ—è", "–≥–æ–ª–ª–∞–Ω–¥–∏—è", "netherlands", "holland"]},
    "de": {"flag": "üá©üá™", "name": "–ù–Ü–ú–ï–ß–ß–ò–ù–ê", "aliases": ["–Ω—ñ–º–µ—á—á–∏–Ω–∞", "–≥–µ—Ä–º–∞–Ω—ñ—è", "–≥–µ—Ä–º–∞–Ω–∏—è", "germany", "de"]},
    "fr": {"flag": "üá´üá∑", "name": "–§–†–ê–ù–¶–Ü–Ø", "aliases": ["—Ñ—Ä–∞–Ω—Ü—ñ—è", "france", "fr"]},
    "es": {"flag": "üá™üá∏", "name": "–Ü–°–ü–ê–ù–Ü–Ø", "aliases": ["—ñ—Å–ø–∞–Ω—ñ—è", "–∏—Å–ø–∞–Ω–∏—è", "spain", "es"]},
    "cz": {"flag": "üá®üáø", "name": "–ß–ï–•–Ü–Ø", "aliases": ["—á–µ—Ö—ñ—è", "—á–µ—Ö–∏—è", "czech", "czechia", "cz"]},
    "pl": {"flag": "üáµüá±", "name": "–ü–û–õ–¨–©–ê", "aliases": ["–ø–æ–ª—å—â–∞", "–ø–æ–ª—å—à–∞", "poland", "pl"]},
    "lt": {"flag": "üá±üáπ", "name": "–õ–ò–¢–í–ê", "aliases": ["–ª–∏—Ç–≤–∞", "lithuania", "lt"]},
    "lv": {"flag": "üá±üáª", "name": "–õ–ê–¢–í–Ü–Ø", "aliases": ["–ª–∞—Ç–≤—ñ—è", "–ª–∞—Ç–≤–∏—è", "latvia", "lv"]},
    "kz": {"flag": "üá∞üáø", "name": "–ö–ê–ó–ê–•–°–¢–ê–ù", "aliases": ["–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω", "kazakhstan", "kz"]},
    "ma": {"flag": "üá≤üá¶", "name": "–ú–ê–†–û–ö–ö–û", "aliases": ["–º–∞—Ä–æ–∫–∫–æ", "morocco", "ma"]},
    "us": {"flag": "üá∫üá∏", "name": "–°–®–ê", "aliases": ["—Å—à–∞", "usa", "—à—Ç–∞—Ç–∏", "us"]},
}

# –¶—ñ–Ω–∏ —É –≤–∏–≥–ª—è–¥—ñ "–º–µ–∂–∞: —Ü—ñ–Ω–∞ –∑–∞ —à—Ç.", –¥–µ –º–µ–∂–∞ ‚Äî —Ü–µ inclusive –≤–µ—Ä—Ö–Ω—è –º–µ–∂–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É
PRICE_TABLE: Dict[str, List[Tuple[int, int]]] = {
    # GB
    "gb": [
        (1, 350),
        (3, 325),
        (9, 300),
        (19, 275),
        (99, 250),
        (999, 210),  # 100+ ‚Äî 210; 1000+ ‚Äî –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞ (–æ–±—Ä–æ–±–∏–º–æ –æ–∫—Ä–µ–º–æ)
    ],
    # NL
    "nl": [
        (3, 800),
        (19, 750),
        (99, 700),
    ],
    # DE
    "de": [
        (3, 1100),
        (9, 1000),
        (99, 900),
    ],
    # FR
    "fr": [
        (3, 1400),
        (9, 1200),
        (99, 1100),
    ],
    # ES
    "es": [
        (3, 900),
        (9, 850),
        (99, 800),
    ],
    # CZ
    "cz": [
        (3, 750),
        (9, 700),
        (99, 650),
    ],
    # PL
    "pl": [
        (3, 500),
        (9, 450),
        (99, 400),
    ],
    # LT
    "lt": [
        (3, 750),
        (9, 700),
        (99, 650),
    ],
    # LV
    "lv": [
        (3, 750),
        (9, 700),
        (99, 650),
    ],
    # KZ
    "kz": [
        (1, 1200),
        (3, 1100),
        (9, 1000),
        (99, 900),
    ],
    # MA
    "ma": [
        (1, 1000),
        (3, 900),
        (9, 800),
        (99, 750),
    ],
    # US (needs top-up for activation)
    "us": [
        (3, 1400),
        (9, 1300),
        (99, 1000),
    ],
}

FAQ = {
    "–∞–∫—Ç–∏–≤–∞—Ü—ñ—è": (
        "–Ø–∫ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ SIM‚Äë–∫–∞—Ä—Ç—É?",
        "–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—Ç–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω —ñ –¥–æ—á–µ–∫–∞–π—Ç–µ—Å—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –º–µ—Ä–µ–∂—ñ (–∞–±–æ –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –≤—Ä—É—á–Ω—É –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö).",
    ),
    "–º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏": (
        "–ß–∏ –∑–º–æ–∂—É —è –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏?",
        "–¢–∞–∫. –ú–æ–∂–Ω–∞ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ WhatsApp, Telegram, Viber —Ç–∞ —ñ–Ω., —ñ –ø—Ä–∏–π–º–∞—Ç–∏ SMS –∑ –±—É–¥—å‚Äë—è–∫–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤.",
    ),
    "–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è": (
        "–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏?",
        "–î–ª—è –ø—Ä–∏–π–æ–º—É SMS ‚Äî –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ. –î–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è. –ú–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è–º–∏ –Ω–µ –∑–∞–π–º–∞—î–º–æ—Å—å; –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ ding.com —Ç–∞ PayPal.",
    ),
    "–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å": (
        "–°–∫—ñ–ª—å–∫–∏ SIM‚Äë–∫–∞—Ä—Ç–∞ –±—É–¥–µ –∞–∫—Ç–∏–≤–Ω–∞?",
        "–ó–∞–∑–≤–∏—á–∞–π –¥–æ –ø—ñ–≤—Ä–æ–∫—É –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–∫–∏. –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏ –ø—Ä–∞—Ü—é—é—Ç—å —ñ –ø—ñ—Å–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó. –©–æ–± –ø—Ä–∞—Ü—é–≤–∞–ª–∞ >6 –º—ñ—Å ‚Äî —Ä–∞–∑ –Ω–∞ 6 –º—ñ—Å –ø–æ–ø–æ–≤–Ω—é–≤–∞—Ç–∏ –Ω–∞ 10 —Ñ—É–Ω—Ç—ñ–≤/—î–≤—Ä–æ.",
    ),
    "—Ç–∞—Ä–∏—Ñ–∏": (
        "–Ø–∫—ñ —Ç–∞—Ä–∏—Ñ–∏?",
        "–ü–æ —Ç–∞—Ä–∏—Ñ–∞—Ö –Ω–µ –∫–æ–Ω—Å—É–ª—å—Ç—É—î–º–æ ‚Äî –¥–∏–≤. —Å–∞–π—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤–∞—à–æ—ó –∫—Ä–∞—ó–Ω–∏.",
    ),
}

US_NOTE = (
    "–ü—Ä–∏–º—ñ—Ç–∫–∞ –ø–æ üá∫üá∏ –°–®–ê: –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –ø–æ—Ç—Ä—ñ–±–Ω–µ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è."
)

ORDER_FIELDS = ["name", "phone", "np", "items"]  # –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è

# ===== –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó =====

def normalize(text: str) -> str:
    return re.sub(r"\s+", " ", text.strip().lower())


def find_country_key(text: str) -> Optional[str]:
    t = normalize(text)
    for key, meta in COUNTRIES.items():
        if meta["name"].lower() in t:
            return key
        for a in meta["aliases"]:
            if a in t:
                return key
        if meta["flag"] in text:
            return key
    return None


def extract_quantity(text: str) -> Optional[int]:
    # –®—É–∫–∞—î–º–æ —á–∏—Å–ª–æ (—à—Ç, —à—Ç—É–∫–∏ —Ç–æ—â–æ)
    m = re.search(r"(\d{1,4})\s*(—à—Ç|—à—Ç—É–∫|—à—Ç—É–∫–∏)?", text, flags=re.IGNORECASE)
    if m:
        try:
            q = int(m.group(1))
            return q if q > 0 else None
        except Exception:
            return None
    return None


def unit_price(country_key: str, qty: int) -> Optional[int]:
    # –î–æ–≥–æ–≤—ñ—Ä–Ω–∞ –¥–ª—è 1000+
    if country_key == "gb" and qty >= 1000:
        return None
    tiers = PRICE_TABLE.get(country_key, [])
    for upper, price in tiers:
        if qty <= upper:
            return price
    # –Ø–∫—â–æ –≤–∏–π—à–ª–∏ –∑–∞ –º–µ–∂—ñ ‚Äî –æ—Å—Ç–∞–Ω–Ω—è –≤—ñ–¥–æ–º–∞ —Ü—ñ–Ω–∞ (–¥–ª—è safety)
    return tiers[-1][1] if tiers else None


def format_price_list() -> str:
    lines = ["–û—Å—å –∞–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—Ä–∞–π—Å –Ω–∞ SIM‚Äë–∫–∞—Ä—Ç–∏:", ""]
    for key in [
        "gb", "nl", "de", "fr", "es", "cz", "pl", "lt", "lv", "kz", "ma", "us"
    ]:
        meta = COUNTRIES[key]
        lines.append(f"{meta['flag']} {meta['name']}")
        tiers = PRICE_TABLE[key]
        # –û—Å–æ–±–ª–∏–≤–∏–π —Ä—è–¥–æ–∫ –¥–ª—è GB 1000+
        for upper, price in tiers:
            if key == "gb" and upper == 999:
                lines.append("100+ —à—Ç. ‚Äî 210 –≥—Ä–Ω")
                lines.append("1000+ —à—Ç ‚Äî –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞")
                break
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏ —è–∫ –≤ –¢–ó
            if key == "gb":
                # gb –º–∞—î 1; 2-3; 4-9; 10-19; 20-99; 100+; 1000+
                pass
        # –í–∏–≤—ñ–¥ —É–∑–≥–æ–¥–∏–º–æ –≤—Ä—É—á–Ω—É –ø—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –∫—Ä–∞—ó–Ω—É –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ:
        if key == "gb":
            lines.extend([
                "",
                "1 —à—Ç. ‚Äî 350 –≥—Ä–Ω",
                "2-3 —à—Ç. ‚Äî 325 –≥—Ä–Ω",
                "4-9 —à—Ç. ‚Äî 300 –≥—Ä–Ω",
                "10-19 —à—Ç. ‚Äî 275 –≥—Ä–Ω",
                "20-99 —à—Ç. ‚Äî 250 –≥—Ä–Ω",
                "",
                "100+ —à—Ç. ‚Äî 210 –≥—Ä–Ω",
                "1000+ —à—Ç ‚Äî –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞",
            ])
        elif key == "nl":
            lines.extend([
                "",
                "1-3 —à—Ç. ‚Äî 800 –≥—Ä–Ω",
                "4-19 —à—Ç. ‚Äî 750 –≥—Ä–Ω",
                "20-99 —à—Ç. ‚Äî 700 –≥—Ä–Ω",
            ])
        elif key == "de":
            lines.extend([
                "",
                "1-3 —à—Ç. ‚Äî 1100 –≥—Ä–Ω",
                "4-9 —à—Ç. ‚Äî 1000 –≥—Ä–Ω",
                "10-99 —à—Ç. ‚Äî 900 –≥—Ä–Ω",
            ])
        elif key == "fr":
            lines.extend([
                "",
                "1-3 —à—Ç. ‚Äî 1400 –≥—Ä–Ω",
                "4-9 —à—Ç. ‚Äî 1200 –≥—Ä–Ω",
                "10-99 —à—Ç. ‚Äî 1100 –≥—Ä–Ω",
            ])
        elif key == "es":
            lines.extend([
                "",
                "1-3 —à—Ç. ‚Äî 900 –≥—Ä–Ω",
                "4-9 —à—Ç. ‚Äî 850  –≥—Ä–Ω",
                "10-99 —à—Ç. ‚Äî 800 –≥—Ä–Ω",
            ])
        elif key == "cz":
            lines.extend([
                "",
                "1-3 —à—Ç. ‚Äî 750 –≥—Ä–Ω",
                "4-9 —à—Ç. ‚Äî 700  –≥—Ä–Ω",
                "10-99 —à—Ç. ‚Äî 650 –≥—Ä–Ω",
            ])
        elif key == "pl":
            lines.extend([
                "",
                "1-3 —à—Ç. ‚Äî 500 –≥—Ä–Ω",
                "4-9 —à—Ç. ‚Äî 450 –≥—Ä–Ω",
                "10-99 —à—Ç. ‚Äî 400 –≥—Ä–Ω",
            ])
        elif key == "lt":
            lines.extend([
                "",
                "1-3 —à—Ç. ‚Äî 750 –≥—Ä–Ω",
                "4-9 —à—Ç. ‚Äî 700  –≥—Ä–Ω",
                "10-99 —à—Ç. ‚Äî 650 –≥—Ä–Ω",
            ])
        elif key == "lv":
            lines.extend([
                "",
                "1-3 —à—Ç. ‚Äî 750 –≥—Ä–Ω",
                "4-9 —à—Ç. ‚Äî 700  –≥—Ä–Ω",
                "10-99 —à—Ç. ‚Äî 650 –≥—Ä–Ω",
            ])
        elif key == "kz":
            lines.extend([
                "",
                "1 —à—Ç. ‚Äî 1200 –≥—Ä–Ω.",
                "2-3 —à—Ç. ‚Äî 1100 –≥—Ä–Ω.",
                "4-9 —à—Ç. ‚Äî 1000 –≥—Ä–Ω",
                "10-99 —à—Ç.  ‚Äî 900 –≥—Ä–Ω",
            ])
        elif key == "ma":
            lines.extend([
                "",
                "1 —à—Ç. ‚Äî 1000 –≥—Ä–Ω.",
                "2-3 —à—Ç. ‚Äî 900 –≥—Ä–Ω.",
                "4-9 —à—Ç. ‚Äî 800 –≥—Ä–Ω",
                "10-99 —à—Ç.  ‚Äî 750 –≥—Ä–Ω",
            ])
        elif key == "us":
            lines.extend([
                "",
                "1-3 —à—Ç. ‚Äî 1400 –≥—Ä–Ω",
                "4-9 —à—Ç. ‚Äî  1300 –≥—Ä–Ω",
                "10-99 —à—Ç. ‚Äî 1000 –≥—Ä–Ω",
                "",
                US_NOTE,
            ])
        lines.append("")
    return "\n".join(lines).strip()


PRICE_LIST_TEXT = format_price_list()


def detect_faq(text: str) -> Optional[str]:
    t = normalize(text)
    if any(k in t for k in ["–∞–∫—Ç–∏–≤", "–≤—Å—Ç–∞–≤", "–ø—ñ–¥–∫–ª—é—á", "–ø–æ–¥–∫–ª—é—á", "–∞–∫—Ç–∏–≤–∞—Ü"]):
        return "–∞–∫—Ç–∏–≤–∞—Ü—ñ—è"
    if any(k in t for k in ["–≤–∞—Ç—Å–∞–ø", "whatsapp", "—Ç–µ–ª–µ–≥—Ä–∞–º", "viber", "–º–µ—Å–µ–Ω–¥–∂", "sms", "—Å–º—Å"]):
        return "–º–µ—Å–µ–Ω–¥–∂–µ—Ä–∏"
    if any(k in t for k in ["–ø–æ–ø–æ–≤–Ω", "–æ–ø–ª–∞—Ç", "ding", "paypal"]):
        return "–ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è"
    if any(k in t for k in ["–∞–∫—Ç–∏–≤–Ω", "—Å–∫—ñ–ª—å–∫–∏", "—Å–∫–æ–ª—å–∫–æ", "–ø—ñ–≤—Ä–æ–∫—É", "–ø–æ–ª–≥–æ–¥–∞", "6 –º—ñ—Å"]):
        return "–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å"
    if any(k in t for k in ["—Ç–∞—Ä–∏—Ñ", "–ø–ª–∞–Ω", "operator", "–æ–ø–µ—Ä–∞—Ç–æ—Ä"]):
        return "—Ç–∞—Ä–∏—Ñ–∏"
    return None


def ensure_user_state(context: ContextTypes.DEFAULT_TYPE) -> Dict[str, Any]:
    # user_data: {
    #   "order": {"name": str, "phone": str, "np": str, "items": [{"country":"gb","qty":1}]}
    # }
    if "order" not in context.user_data:
        context.user_data["order"] = {"name": None, "phone": None, "np": None, "items": []}
    return context.user_data["order"]


def parse_contact_block(text: str) -> Dict[str, Optional[str]]:
    # –®—É–∫–∞—î–º–æ —ñ–º'—è/–ø—Ä—ñ–∑–≤–∏—â–µ (—Ä—è–¥–æ–∫ —ñ–∑ –¥–≤–æ—Ö —Å–ª—ñ–≤, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ –ª—ñ—Ç–µ—Ä–∏)
    name = None
    lines = [l.strip() for l in text.splitlines() if l.strip()]
    for l in lines:
        if re.match(r"^[A-Za-z–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë'`\-]+\s+[A-Za-z–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë'`\-]+$", l):
            name = l
            break

    # –¢–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ +380 ... –∞–±–æ —ñ–Ω.
    phone_match = re.search(r"(\+?\d[\d\s()\-]{7,}\d)", text)
    phone = phone_match.group(1).strip() if phone_match else None

    # –ù–æ–≤–∞ –ø–æ—à—Ç–∞: —à—É–∫–∞—î–º–æ –º—ñ—Å—Ç–æ + –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è/–ø–æ—à—Ç–æ–º–∞—Ç/‚Ññ
    np = None
    for l in lines:
        if any(k in l.lower() for k in ["–Ω–æ–≤–∞ –ø–æ—à—Ç–∞", "–Ω–æ–≤–æ—ó –ø–æ—à—Ç–∏", "–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è", "‚Ññ", "–ø–æ—à—Ç–æ–º–∞—Ç", "–ø–æ—à—Ç–æ–º–∞—Ç–∞", "postomat", "–ø–æ—à—Ç–æ–º–∞—Ç "]):
            np = l
            break
        # –°–ø—Ä–æ—â–µ–Ω–æ: –º—ñ—Å—Ç–æ + —Å–ª–æ–≤–æ –ø–æ—à—Ç–æ–º–∞—Ç/–≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è + –Ω–æ–º–µ—Ä
        if re.search(r"(–º—ñ—Å—Ç–æ|–∏—Ä–ø—ñ–Ω|—ñ—Ä–ø—ñ–Ω|–∫–∏—ó–≤|–ª—å–≤—ñ–≤|–æ–¥–µ—Å–∞|–¥–Ω—ñ–ø—Ä–æ|—Ö–∞—Ä–∫|–ø–æ–ª—Ç–∞–≤–∞).*(–≤—ñ–¥–¥—ñ–ª–µ–Ω|–ø–æ—à—Ç–æ–º–∞—Ç|‚Ññ|#|n|no)", l, flags=re.I):
            np = l
            break
    return {"name": name, "phone": phone, "np": np}


def add_or_update_item(order: Dict[str, Any], country_key: str, qty: int) -> None:
    # –Ø–∫—â–æ –≤–∂–µ —î —Ç–∞–∫–∞ –∫—Ä–∞—ó–Ω–∞ ‚Äî –∞–ø–¥–µ–π—Ç–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    for it in order["items"]:
        if it["country"] == country_key:
            it["qty"] = qty
            return
    order["items"].append({"country": country_key, "qty": qty})


def parse_items_line(text: str) -> List[Tuple[str, int]]:
    """–í–∏—Ç—è–≥—É—î–º–æ (–∫—Ä–∞—ó–Ω–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å) —ñ–∑ –¥–æ–≤—ñ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É. –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–∞—Ä."""
    items = []
    # –°–ø–µ—Ä—à—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –∑–Ω–∞–π—Ç–∏ –ø–∞—Ç–µ—Ä–Ω–∏ —Ç–∏–ø—É "–ê–Ω–≥–ª—ñ—è 2", "üá¨üáß 1", "PL x3" —Ç–æ—â–æ
    chunks = re.split(r"[,;\n]", text)
    for ch in chunks:
        ck = find_country_key(ch)
        if ck:
            q = extract_quantity(ch) or 1
            items.append((ck, q))
    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ ‚Äî –ø—Ä–æ–±—É—î–º–æ –æ–¥–Ω—É –∫—Ä–∞—ó–Ω—É –Ω–∞ –≤–µ—Å—å —Ç–µ–∫—Å—Ç
    if not items:
        ck = find_country_key(text)
        if ck:
            q = extract_quantity(text) or 1
            items.append((ck, q))
    return items


def format_order_summary(order: Dict[str, Any]) -> Tuple[str, Optional[str]]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î (summary_text, admin_json)."""
    lines = []
    if order.get("name"):
        lines.append(order["name"])  # –Ü–º'—è –ü—Ä—ñ–∑–≤–∏—â–µ –æ–∫—Ä–µ–º–∏–º —Ä—è–¥–∫–æ–º
    if order.get("phone"):
        lines.append(order["phone"])  # –¢–µ–ª–µ—Ñ–æ–Ω
    if order.get("np"):
        lines.append(order["np"])     # –ú—ñ—Å—Ç–æ + –ù–ü
    lines.append("")

    # –ü–æ–∑–∏—Ü—ñ—ó
    total_sum = 0
    contract_needed = False
    for it in order.get("items", []):
        ck, qty = it["country"], it["qty"]
        meta = COUNTRIES.get(ck, {})
        up = unit_price(ck, qty)
        if ck == "gb" and qty >= 1000:
            contract_needed = True
            price_line = f"{meta.get('flag','')} {meta.get('name','')}, {qty} —à—Ç ‚Äî –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞"
            lines.append(price_line)
        else:
            if up is None:
                price_line = f"{meta.get('flag','')} {meta.get('name','')}, {qty} —à—Ç ‚Äî —Ü—ñ–Ω—É —É—Ç–æ—á–Ω–∏–º–æ"
            else:
                price_line = f"{meta.get('flag','')} {meta.get('name','')}, {qty} —à—Ç ‚Äî {up} –≥—Ä–Ω"
                total_sum += up * qty
            lines.append(price_line)
        if ck == "us":
            lines.append(US_NOTE)

    # –ü—ñ–¥—Å—É–º–æ–∫
    lines.append("")
    if total_sum > 0:
        lines.append(f"–†–∞–∑–æ–º –¥–æ —Å–ø–ª–∞—Ç–∏: {total_sum} –≥—Ä–Ω")
    if contract_needed:
        lines.append("–î–ª—è 1000+ —à—Ç. –ø–æ üá¨üáß ‚Äî –¥–æ–≥–æ–≤—ñ—Ä–Ω–∞ —Ü—ñ–Ω–∞, —É—Ç–æ—á–Ω–∏–º–æ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö.")

    summary = "\n".join([l for l in lines if l is not None]).strip()

    admin_json = json.dumps(order, ensure_ascii=False)
    return summary, admin_json


def all_required_filled(order: Dict[str, Any]) -> bool:
    return all(order.get(f) for f in ORDER_FIELDS)


def missing_fields(order: Dict[str, Any]) -> List[str]:
    return [f for f in ORDER_FIELDS if not order.get(f)]


# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    order = ensure_user_state(context)
    welcome = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ SIM‚Äë–∫–∞—Ä—Ç–∏.\n\n"
        + PRICE_LIST_TEXT
        + "\n\n–©–æ–± –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –¥–∞–Ω—ñ —É –¥–æ–≤—ñ–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ –∞–±–æ —è–∫ —Å–ø–∏—Å–æ–∫:\n\n"
        "1) –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É\n3) –ú—ñ—Å—Ç–æ —ñ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è/–ø–æ—à—Ç–æ–º–∞—Ç—É –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏\n4) –ö—Ä–∞—ó–Ω–∞(–∏) —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å SIM‚Äë–∫–∞—Ä—Ç"
    )
    await update.message.reply_text(welcome)


# ===== –ì–æ–ª–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å =====
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None or update.message.text is None:
        return

    text = update.message.text.strip()
    order = ensure_user_state(context)

    # 1) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ FAQ
    faq_key = detect_faq(text)
    if faq_key:
        title, answer = FAQ[faq_key]
        await update.message.reply_text(f"{title}\n\n{answer}")
        return

    # 2) –ü–∞—Ä—Å–∏–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ (—ñ–º'—è/—Ç–µ–ª–µ—Ñ–æ–Ω/–ù–ü), —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ó—Ö –∫–∏–Ω—É–≤ –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º
    contact_guess = parse_contact_block(text)
    for k in ["name", "phone", "np"]:
        if contact_guess.get(k) and not order.get(k):
            order[k] = contact_guess[k]

    # 3) –ü–∞—Ä—Å–∏–º–æ –ø–æ–∑–∏—Ü—ñ—ó (–∫—Ä–∞—ó–Ω–∏ + –∫—ñ–ª—å–∫—ñ—Å—Ç—å)
    items = parse_items_line(text)
    for ck, qty in items:
        add_or_update_item(order, ck, qty)

    # 4) –Ø–∫—â–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –ø–æ–≤–Ω–µ ‚Äî —Ñ–æ—Ä–º—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    if all_required_filled(order):
        summary, _admin = format_order_summary(order)
        await update.message.reply_text(summary)
        # –ü–æ–¥—è–∫–∞ –¥—Ä—É–≥–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        await update.message.reply_text("–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –í–æ–Ω–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –ø—Ä–æ—Ç—è–≥–æ–º 24 –≥–æ–¥–∏–Ω. üòä")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –π –æ—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –Ω–æ–≤–µ
        context.user_data["last_order"] = order.copy()
        context.user_data["order"] = {"name": None, "phone": None, "np": None, "items": []}
        return

    # 5) –Ü–Ω–∞–∫—à–µ ‚Äî –∑–∞–ø–∏—Ç—É—î–º–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è –ø–æ —á–µ—Ä–∑—ñ
    miss = missing_fields(order)
    prompts = {
        "name": "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ë–æ–Ω–¥–∞—Ä –ê–Ω–∞—Å—Ç–∞—Å—ñ—è).",
        "phone": "–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380...",
        "np": "–ù–∞–ø–∏—à—ñ—Ç—å –º—ñ—Å—Ç–æ —Ç–∞ ‚Ññ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è/–ø–æ—à—Ç–æ–º–∞—Ç—É –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –Ü—Ä–ø—ñ–Ω—å –ø–æ—à—Ç–æ–º–∞—Ç 34863).",
        "items": "–Ø–∫—ñ –∫—Ä–∞—ó–Ω–∏ —Ç–∞ —Å–∫—ñ–ª—å–∫–∏ SIM‚Äë–∫–∞—Ä—Ç –ø–æ—Ç—Ä—ñ–±–Ω–æ? (–º–æ–∂–Ω–∞ —Ç–∞–∫: üá¨üáß 1; üáµüá± 2)"
    }

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç—è–∫–Ω—É–≤ –Ω–∞ –∫—Ä–∞—ó–Ω—É, –∞–ª–µ –Ω–µ–º–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
    if items and any(it[1] is None for it in items):
        await update.message.reply_text("–°–∫—ñ–ª—å–∫–∏ —à—Ç—É–∫ –ø–æ—Ç—Ä—ñ–±–Ω–æ?")
        return

    # –ü–∏—Ç–∞—î–º–æ –ø–µ—Ä—à–µ –∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö
    next_field = miss[0] if miss else "items"
    await update.message.reply_text(prompts[next_field])

    # 6) –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∫–ª–∞—Å–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ‚Äî
    #    –ø–µ—Ä–µ–¥–∞—î–º–æ —É GPT –¥–ª—è –≤–≤—ñ—á–ª–∏–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∞–ª–µ –∑ –ø—ñ–¥–∫–∞–∑–∫–æ—é –±—ñ–∑–Ω–µ—Å-–¥–∞–Ω–∏—Ö
    #    (—Ä–æ–±–∏–º–æ —Ü–µ –ü–Ü–°–õ–Ø –Ω–∞—à–æ—ó –ª–æ–≥—ñ–∫–∏, —â–æ–± –Ω–µ –∑–∞–≤–∞–∂–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è)
    try:
        sys_prompt = (
            "–¢–∏ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω–∏–π —ñ –∫–æ—Ä–∏—Å–Ω–∏–π Telegram‚Äë–±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É SIM‚Äë–∫–∞—Ä—Ç.\n"
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ª–∞–∫–æ–Ω—ñ—á–Ω–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é.\n"
            "–°–ø–µ—Ä—à—É –Ω–∞–º–∞–≥–∞–π—Å—è –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: –∑–±–µ—Ä–∏ —ñ–º'—è+–ø—Ä—ñ–∑–≤–∏—â–µ, —Ç–µ–ª–µ—Ñ–æ–Ω, –º—ñ—Å—Ç–æ+‚Ññ –ù–ü, –∫—Ä–∞—ó–Ω—É —Ç–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å.\n"
            "–û—Å—å –ø—Ä–∞–π—Å —Ç–∞ –ø—Ä–∞–≤–∏–ª–∞:\n\n" + PRICE_LIST_TEXT + "\n\n"
            + US_NOTE + "\n\n"
            "FAQ:\n"
            "1) –ê–∫—Ç–∏–≤–∞—Ü—ñ—è: –≤—Å—Ç–∞–≤–∏—Ç–∏ SIM —Ç–∞ –¥–æ—á–µ–∫–∞—Ç–∏—Å—è –º–µ—Ä–µ–∂—ñ (–∞–±–æ –≤—Ä—É—á–Ω—É).\n"
            "2) –ú–µ—Å–µ–Ω–¥–∂–µ—Ä–∏: –º–æ–∂–Ω–∞ —Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ WhatsApp/Telegram/Viber, –ø—Ä–∏–π–º–∞—î SMS.\n"
            "3) –ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: –¥–ª—è SMS –Ω–µ —Ç—Ä–µ–±–∞; –¥–ª—è –¥–∑–≤—ñ–Ω–∫—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ (—á–µ—Ä–µ–∑ ding.com/PayPal, —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ).\n"
            "4) –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: –¥–æ –ø—ñ–≤—Ä–æ–∫—É; –¥–ª—è >6 –º—ñ—Å ‚Äî —Ä–∞–∑ –Ω–∞ 6 –º—ñ—Å –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è 10 —Ñ—É–Ω—Ç—ñ–≤/—î–≤—Ä–æ.\n"
            "5) –¢–∞—Ä–∏—Ñ–∏: –¥–∏–≤–∏—Ç–∏—Å—è –Ω–∞ —Å–∞–π—Ç—ñ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n"
        )
        resp = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": sys_prompt},
                {"role": "user", "content": text},
            ],
            max_tokens=400,
            temperature=0.4,
        )
        ai_text = resp.choices[0].message["content"].strip()
        if ai_text:
            await update.message.reply_text(ai_text)
    except Exception as e:
        logger.warning(f"GPT fallback error: {e}")


# ===== –ó–∞–ø—É—Å–∫ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É =====
def main():
    if not TELEGRAM_TOKEN:
        raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    if not WEBHOOK_URL:
        raise RuntimeError("WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ø–æ–≤–Ω–∏–π HTTPS URL)")

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="",  # –ø–æ—Ä–æ–∂–Ω—ñ–π —à–ª—è—Ö —Ç–µ–∂ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ PTB v20
        webhook_url=WEBHOOK_URL,
    )


if __name__ == "__main__":
    main()
